---
layout: post
title: "210822-TIL(Redux)"
subtitle: "TIL-210822"
categories: til
tags: til
comments: false
---
# 📝 공부할 거리
---
img 태그 안에서 role="presentation"은 뭘 가리키는가?

⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 PostImages
---
이미지 게시물을 등록하면 화면에 어떻게 보일지 설정      
```javascript
import React, { useState, useCallback } from 'react'
import PropTypes from 'prop-types';

import { PlusOutlined } from '@ant-design/icons';

const PostImages = ({ images }) => {
    const [showImageZoom, setShowImagesZoom] = useState(false);
    // 이미지를 클릭했을 때 전체화면을 구현하기 위한 기능
    const onZoom = useCallback(() => {
        setShowImagesZoom(true);
    }, []);
    if (images.length === 1) { // 이미지가 1개 일 때
        return (
            <>
                <img role="presentation" src={images[0].src} alt={images[0].src} onClick={onZoom} />
                // presentation이 뭔지 조사해보자
                // 장애인을 위한 기능이라고 함
                // 사전에 어떤 식으로 보여줄지 인지시킨다고 함
            </>
        )
    }
    if (images.length === 2) { // 이미지가 2개 일 때
        return (
            <>
                <img role="presentation" style={{ width: "50%", display: "inline-block" }} src={images[0].src} alt={images[0].src} onClick={onZoom} />
                <img role="presentation" style={{ width: "50%", display: "inline-block" }} src={images[1].src} alt={images[1].src} onClick={onZoom} />
            </>
        )
    }
    return (
        <>
            <div>
                <img role="presentation" width="50%" src={images[0].src} alt={images[0].src} onClick={onZoom} />
                <div
                    role="presentation"
                    style={{ display: 'inline-block', width: "50%", textAlign: "center", verticalAlign: 'middle' }}
                    onClick={onZoom}
                >
                    <PlusOutlined />
                    <br />
                    {images.length - 1}
                    개의 사진 더보기
                </div>
            </div>
        </>
    )
}

PostImages.propTypes = {
    images: PropTypes.arrayOf(PropTypes.object),
}

export default PostImages
```
⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 이미지 캐루셀 구현하기
---
옆으로 슬라이드 해서 사진을 보는 기능을 구현하기 위해 **react-slick**이라는 라이브러리 설치     
```
npm i react-slick
```
ImagesZoom/index.js
```javascript
import React, { useState } from "react";
import PropTypes from "prop-types";

import Slick from "react-slick";

import { // styles.js 로 빼줌
    Overlay,
    Header,
    SlickWrapper,
    ImgWrapper,
    Indicator,
    Global,
    CloseBtn
} from "./styles";

const ImageZoom = ({ images, onClose }) => {
    const [currentSlide, setCurrentSlide] = useState(0);
    // 현재 슬라이드가 몇 페이지인지 상태를 저장

    return (
        <Overlay>
            <Header>
                <h1>상세 이미지</h1>
                <button onClick={onClose}>X</button>
            </Header>
            <SlickWrapper>
                <div>
                    <Slick
                        initialSlide={0}
                        afterChange={(slide) => setCurrentSlide(slide)}
                        infinite
                        arrows={false}
                        slidesToShow={1}
                    >
                        {images.map((v) => (
                            <ImgWrapper key={v.src}>
                                <img src={v.src} alt={v.src} />
                            </ImgWrapper>
                        ))}
                    </Slick>
                </div>
            </SlickWrapper>
        </Overlay>
    )
}

ImageZoom.propTypes = {
    images: PropTypes.arrayOf(PropTypes.object).isRequired,
    onClose: PropTypes.func.isRequired,
}

export default ImageZoom;
```

<br/>

ImagesZoom/styles.js
```javascript
import styled, { createGlobalStyle } from "styled-components";
import { CloseOutlined } from "@ant-design/icons";
export const Overlay = styled.div`
    position: fixed;
    z-index: 5000;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
`;

// 가장 큰 단위를 header -> Header과 같이 바꿔주고 
// 내부의 작은 tag들을 Sass처럼 & 연산자를 사용해서 지정해줄 수 있다.
export const Header = styled.header`
    height: 44px;
    background: white;
    position: relative;
    padding: 0;
    text-align: center;

    & h1 {
        margin: 0;
        font-size: 17px;
        color: #333;
        line-height: 44px;
    }
`;

export const SlickWrapper = styled.div`
    height: calc(100% - 44px);
    background: #090909;
`;

export const ImgWrapper = styled.div`
    padding: 32px;
    text-align: center;

    & img {
        margin: 0 auto;
        max-height: 750px;
    }
`;

export const Indicator = styled.div`
    text-align: center;

    & > div {
        width: 75;
        height: 30px;
        line-height: 30px;
        border-radius: 15px;
        background: #313131;
        display: inline-block;
        text-align: center;
        color: white;
        font-size: 15px;
    }
`;

export const Global = createGlobalStyle`
    .slick-slide {
        display: inline-block;
    }
`;

export const CloseBtn = styled(CloseOutlined)`
    position: absolute;
    right: 0;
    top: 0;
    padding: 15px;
    line-height: 14px;
    cursor: pointer;
`;

```

⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 정규식 regExr
---
정규식 테스트 하는 사이트       
<https://regexr.com/>    

```javascript
띄어쓰기 있는 경우: #해시태그 #익스프레스
붙어있는 경우: #첫번째#두번째
해시태그 여러개인 경우: ###해시태그

//g -> g가 붙으면 global이라는 의미로 해당되는 것을 전부 다 찾음
/#/g => 첫번째에 #있는 경우 전부 찾음
/#./g => .갯수에 따라 # 뒤에 몇개의 문자까지 포함할 건지 나타냄
/#.+/g => # 뒤에 전부 선택
/#[]+/g => 대괄호 안에 있는 것 중에 선택
/#[^]+/g => ^뒤에 들어가는 것을 제외함
ㄴ /#[^\s]+/g => 공백이 들어가는 것을 제외
ㄴ /#[^/s#]+/g => 공백과 #이 들어가면 끊어줌


// Tip
//split인 경우
[].split(/(#[^/s#]+)/g); //와 같이 내부에 ()를 만들어줘야함
```

⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 PostCardContent
---
해시태그를 처리해주는 기능을 담당           
```javascript
import React from 'react'
import Link from 'next/link';
import PropTypes from 'prop-types';

const PostCardContent = ({ postData }) => {
    return (
        <div>
            {postData.split(/(#[^\s#]+)/g).map((v, i) => {
                if (v.match(/(#[^\s#]+)/)) {
                    return 
                    <Link 
                        href={`/hashtag/${v.slice(1)}`} // #을 떼냄
                        key={i}><a>{v}</a></Link>
                }
                return v;
            })}
        </div>
    )
}

PostCardContent.propTypes = {
    postData: PropTypes.string.isRequired,
}

export default PostCardContent
```


