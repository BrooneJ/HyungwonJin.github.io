---
layout: post
title: "210809-TIL(React.js)"
subtitle: "TIL-210809"
categories: til
tags: til
comments: false
---

## Timeout
---
dom에 직접 접근할 때만 ref를 썼었는데 훅스에서는 this의 속성들을 ref로 사용

## useState, useRef
---
useState는 return 부분이 다시 실행됨       
useRef는 다시 시작되지 않음     
따라서 다시 랜더링 하고 싶은 부분은 state에     
다시 랜더링 하고 싶지 않은 부분은 useRed에

## setTimeout을 react에서 쓰는 법
---
current를 꼭 붙어줘야한다.
```javascript
import React, { useRef, useState } from "react";

const ResponseCheck = () => {
    const [state, setState] = useState('waiting');
    const [message, setMessage] = useState("클릭해서 시작하세요,");
    const [result, setResult] = useState([]);
    const timeout = useRef(null);
    const startTime = useRef(0);
    const endTime = useRef(0);

    const onClickScreen = () => {
        if (state === 'waiting') {
            setState('ready');
            setMessage("초록색이 되면 클릭하세요.")
            timeout.current = setTimeout(() => {
                // this.timeout = setTimeout(() => {
                setState('now');
                setMessage('지금 클릭');
                startTime.current = new Date();
                // this.startTime = new Date();
            }, Math.floor(Math.random() * 1000) + 2000);
        } else if (state === 'ready') {
            clearTimeout(timeout.current);
            // clearTimeout(this.timeout);
            setState('waiting');
            setMessage('너무 일찍 눌렀습니다.');
        } else if (state === 'now') {
            endTime.current = new Date();
            // this.endTime = new Date();
            setState('waiting');
            setMessage('클릭해서 시작하세요.')
            setResult((prevState) => {
                return [...prevState, endTime.current - startTime.current];
                // result: [...prevState.result, this.endTime - this.startTime];
            })
        }
    }
    ...

export default ResponseCheck;
```

## componentDidMount() & componentDidUpdate() & componentWillUnmount()
---
componentDidMount: 컴포넌트가 첫 렌더링 된 후 실행       
componentDidUpdate: 리렌더링 된 후 계속      
componentWillUnmount: 컴포넌트가 제거되기 전        

## 라이프 사이클
---
Class인 경우 -> constructor -> render -> ref -> componentDidMount       
-> (setState/props 바뀔 때 -> shouldComponentUpdate(true) -> render -> componentDidUpdate)        
부모가 나를 없앴을 때 -> componentWillUnmount       

client.jsx에서 렌더링 되는 순간 RSP.jsx의 constructor부분이랑 method 부분이 class에 붙는다. -> 그리고 렌더링을 처음 한번한다. -> ref가 있으면 ref도 같이 처리 -> 첫번째 렌더링이 끝났다면 componentDidMount가 실행이 된다. -> 화면에 보임       

화면이 보인 후 props나 setState를 바꾸거나 하면 리렌더링이 있어난다. -> 이 때 shouldComponentUpdate의 return이 true가 되는 경우 리렌더링이 일어남 -> 리렌더링 후에는 componentDidUpdate -> 만약 부모가 자식 component를 없앨 때에는 componentWillUnmount -> 그 후에는 화면에서 사라짐

- 사용 예시     
```javascript
interval;
componentDidMount() { // 여기서 인터벌 설정
    this.interval = setInterval(() => {
        console.log("asdf");
    }, 1000)
}

componentDidUpdate() { 
   //여기도 setInterval이 들어 올 수 있음
}

componentWillUnmount() { // 여기서 인터벌 해제
     clearInterval(this.interval);
}
```

## body 문제 troubleShooting
---
![그림 1-1](/assets/img/web/2021-08-09/1-1.png)         
```html
<body id="root">
    <script src="./dist/app.js"></script>
</body>
//--------------------------------
<body>
    <div id="root"></div>
    <script src="./dist/app.js"></script>
</body>
```


