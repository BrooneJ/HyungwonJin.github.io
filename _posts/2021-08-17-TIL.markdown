---
layout: post
title: "210817-TIL(React, Next)"
subtitle: "TIL-210817"
categories: til
tags: til
comments: false
---

# 공부할 거리
---
useCallback, useMemo 차이? -> 함수를 캐싱: useCallback, 값을 캐싱: useMemo      
서버사이드 랜더링, 클라이언트 사이드 랜더링 원리        
Next 고유의 동작원리        
코드 스플리팅 순서도        
CORS란?


## 주의사항
---
component에 props로 넘겨주는 함수는 useCallback을 쓰면 최적화가 된다.

## 컴포넌트 만드는 방법
---
component 폴더 안에 만들고자하는 component 파일을 만든다.       
ex) LoginForm, UserProfile      
그리고 AppLayout.js 파일에 import 하고 불러온다.       

<br /> 

AppLayout.js
```javascript
...
import UserProfile from "../components/UserProfile";
import LoginForm from "../components/LoginForm";

const AppLayout = ({ children }) => {
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    return (
        <div>
            ...
            <Row gutter={8}>
                <Col xs={24} md={6}>
                    {isLoggedIn ? <UserProfile /> : <LoginForm />}
                    // isLoggedIn이 true이면 UserProfile을 false이면 LoginForm을 불러온다.
                </Col>
                ...
            </Row>
        </div>
    )
}

```

<br/>

LoginForm.js
```javascript
import React, { useCallback, useState } from "react";
import { Form, Input, Button } from "antd";
import Link from "next/link";

const LoginForm = () => {
    const [id, setId] = useState('');
    const [password, setPassword] = useState('');

    const onChangeId = useCallback((e) => {
        setId(e.target.value);
    }, []);

    const onChangePassword = useCallback((e) => {
        setPassword(e.target.value);
    }, []);

    return (
        <Form>
            <div>
                <label htmlFor="user-id">아이디</label>
                <br />
                <Input name="user-id" value={id} onChange={onChangeId} required />
            </div>
            <div>
                <label htmlFor="user-password">비밀번호</label>
                <br />
                <Input
                    name="user-password"
                    type="password"
                    value={password}
                    onChange={onChangePassword}
                    required
                />
            </div>
            <div>
                <Button type="primary" htmlType="submit" loading={false}>로그인</Button>
                <Link href="/signup"><a><Button>회원가입</Button></a></Link>
            </div>
        </Form>
    )
}

export default LoginForm;
```

## customize하게 수정할 때 주의해야할 사항
---
LoginForm.js
```javascript
...
import styled from "styled-components";

// styled-component 사용방법
const ButtonWrapper = styled.div`
    margin-top: 10px;
`;
...
    return (
        <Form>
            ...
            <ButtonWrapper>
                <Button type="primary" htmlType="submit" loading={false}>로그인</Button>
                <Link href="/signup"><a><Button>회원가입</Button></a></Link>
            </ButtonWrapper>
            //-----------------------------------------------------------------------------
            // 아랫부분 처럼하면 리렌더링할 때마다 새로 불러오게 된다.
            // 왜냐하면 {} === {} 는 항상 false가 나오기 때문이다.
            // <div style={{ marginTop: "10px" }}>
            //     <Button type="primary" htmlType="submit" loading={false}>로그인</Button>
            //     <Link href="/signup"><a><Button>회원가입</Button></a></Link>
            // </div>
        </Form>
    )
}

export default LoginForm;
```


## component와 tag를 수정할 때 차이점
---
```javascript
// tag 일 때
const 변수명 = styled.div` css `;

//component일 때
const 변수명 = styled(Input.Search)
```


## 커스텀 hooks
---
hooks/useinput.js
```javascript
import { useState, useCallback } from "react";

export default (initialValue = null ) => {
    const [value, setValue] = useState(initialValue);
    const handler = useCallback(
        (e) => {
            setValue(e.target.value);
        },
        [],
    )
    return [value, handler];
}
```

<br/>

LoginForm.js        
```javascript
import useinput from "../hooks/useinput";
// custom으로 만든 hooks를 가져와서 사용

const LoginForm = ({ setIsLoggedIn }) => {
    const [id, onChangeId] = useinput('');
    const [password, onChangePassword] = useinput('');
    return (
        <FormWrapper onFinish={onSubmitForm}>
            <div>
                <label htmlFor="user-id">아이디</label>
                <br />
                <Input name="user-id" value={id} onChange={onChangeId} required />
            </div>
            ...
    )
}
```

## SSR, CSR
---
SSR     
![1-1](/assets/img/web/2021-08-17/1.jpeg)
SCR     
![1-1](/assets/img/web/2021-08-17/2.jpeg)       
React가 필요할 때 -> 사용자의 빠른 인터렉션이 필요할 때     
React는 모든 페이지를 다 불러오기 때문에 로딩이 발생하는데 이를 해결하기 위한 방법      
1. 서버 사이드 랜더링: 첫 방문만 전통적인 방식으로 페이지를 불러오고 다음은 react방식으로 운용(백엔드에서 데이터를 받아오기만 할 뿐)      
2. 코드 스플리팅: 방문한 페이지에 관련된 페이지만 불러옴


## prop-types
---
<https://ko.reactjs.org/docs/typechecking-with-proptypes.html>      
컴포넌트의 props에 타입 확인        
PropTypes는 전달받은 데이터의 유효성을 검증하기 위해서 다양한 유효성 검사기(Validator)를 내보냅니다.
```javascript
MyComponent.propTypes = {
  children: PropTypes.element.isRequired
  // isRequired를 사용해서 prop가 제공되지 않았을 때
  // 경고가 보이도록 할 수 있습니다.
};
```

## Next에서 route하는 법
----
Link라는 것을 사용한다.     
```javascript
import Link from 'next/link';

const AppLayout = ({ children}) => {
    return (
        <div>
            <Link href="/"><a>Home</a></Link>
            // 주의할 사항은 <a>에 href를 적는게 아니라
            // Link에 적는 것
        </did>
    )
}
```