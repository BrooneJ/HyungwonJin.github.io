---
layout: post
title: "211003-TIL(Web Storage API, module)"
subtitle: "TIL-211003"
categories: til
tags: til-2021-10
comments: false
---

# Web Storage API

---

<https://developer.mozilla.org/ko/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API>

Storage 객체는 단순한 key-value 저장소이며, 이는 객체와 비슷합니다. 하지만 이 데이터들은 페이지 로딩에도 온전하게 유지됩니다. key와 그 value는 항상 문자열입니다.

## sessionStorage와 localStorage 차이점

---

### sessionStorage

---

- sessionStorage는 현재 세션의 Storage객체에 접근해서 데이터를 임시로 저장한다.  
  즉, 현재의 세션이 만료되면 Storage의 데이터도 사라진다.(브라우저를 끄지 않는 한 새로고침을 해도 데이터가 남아있음, 하지만 새로운 탭을 여러개 만들면 각각 새로운 세션와 sessionStorage가 만들어진다고 함)
- 탭이나 창을 닫으면 세션이 끝나고 sessionStorage 속의 데이터도 초기화 된다.

### localStorage

---

- sessionStorage와는 다르게 새로운 탭을 여러개 만들어도 각 탭이 데이터를 공유함
- 탭을 닫아도 sessionStorage와는 다르게 데이터가 만료되지 않고 남아있음

## sessionStorage와 localStorage 공통점

---

- sessionStorage에 저장한 자료는 페이지 프로토콜별로 구분합니다. 특히 HTTP로 방문한 페이지에서 저장한 데이터는 같은 페이지의 HTTPS와는 다른 sessionStorage에 저장됩니다.
- 키와 값은 항상 각 문자에 2바이트를 할당하는 UTF-16 DOMString의 형태로 저장합니다. 객체와 마찬가지로 정수 키는 자동으로 문자열로 변환합니다.

## Storage

---

- Storage.key(n): n번째 항목의 key를 반환
- Storage.getItem(keyName): keyName에 대한 값을 반환
- Storage.setItem(keyName, keyValue): 키 저장소에 값이 있는 경우는 값을 재설정, 키 저장소에 값이 없는 경우 키와 값을 지정
- Storage.removeItem(keyName): 삭제하고자하는 keyName을 입력해서 삭제
- Storage.clear(): 저장소의 모든 키를 저장소에서 제거합니다.

# 모듈(module)

---

<https://ko.javascript.info/modules-intro>  
파일을 각각 기능 단위로 나눠서 구성하면 분리된 각각의 파일을 **모듈**이라고 부른다.  
예전에는 스크립트의 크기가 크지 않아서 모듈을 적용할 필요가 없었지만 javascript도 복잡해지면서 모듈의 필요성이 제기됨에 따라 2015년부터 모듈을 제공하게 되었다.

모듈은 특수한 키워드나 기능과 함께 사용되므로 `<script type="module">` 같은 속성을 설정해 해당 스크립트가 모듈이란 걸 브라우저가 알 수 있게 해줘야 합니다.

## ❓❗️주의 사항

---

모듈은 로컬파일에서 동작하지 않기 때문에 import, export 지시자가 동작하지 않습니다.  
따라서 http-server나 Live Server 익스텐션을 사용하도록하자

## 모듈의 핵심기능

---

- 엄격모드로 실행됨: 선언되지 않은 변수에 값을 할당하는 등의 코드는 에러 처리
- 모든 레벨 스코프: 모듈은 자신만의 스코프를 가지고 있어서 다른 모듈에서 정의한 변수, 함수에 접근할 수 없음. 따라서 접근하기 위해서는 import와 export를 사용해서 접근해야한다.
- 단 한번만 평가됨: 모듈을 두번 호출하더라도 처음에 호출했을 때만 실행된다.
