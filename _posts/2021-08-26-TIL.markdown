---
layout: post
title: "210826-TIL(Redux-saga)"
subtitle: "TIL-210826"
categories: til
tags: til
comments: false
---


## 🌟 reducer의 action코드 정리의 필요성
---
reducer의 액션이 점점 길어지면 오타가 나기 쉽고 수정이 어렵게 된다.     
따라서 사용과 수정이 쉽도록 따로 정리해주는 것이 좋다.      
<br/>

reducer/user.js
```javascript 
export const LOG_IN_REQUEST = "LOG_IN_REQUEST";
export const LOG_IN_SUCCESS = "LOG_IN_SUCCESS";
export const LOG_IN_FAILURE = "LOG_IN_FAILURE";
...

export const loginRequestAction = (data) => {
    return {
->      type: LOG_IN_REQUEST,
        data,
    }
}
const reducer = (state = initialState, action) => {
    switch (action.type) {
->      case LOG_IN_REQUEST:
            return {
                ...state,
                isLoggingIn: true,
            }
        ...
    }
}

```

☑️ dummyUser 생성      
reducers/user.js        
```javascript
const dummyUser = (data) => ({
    ...data,
    nickname: 'JIN',
    id: 1,
    Posts: [],
    Followings: [],
    Followers: [],
});

const reducer = (state = initialState, action) => {
    switch (action.type) {
        ...
        case LOG_IN_SUCCESS:
            return {
                ...state,
                logInLoading: false,
                logInDone: true,
->              me: dummyUser(action.data), 
            // reducers/user.js에서 만든 초기값 me: null 에 더미데이터를 삽입
            };
        ...
    }
}
```
<br/>

conponents/UserProfile.js       
```javascript
const { me, logOutLoading } = useSelector((state) => state.user);
// useSelector를 통해서 리덕스에서 자유롭게 불러올 수 있음
<Card
    actions={[
->      <div key="twit">짹짹<br />{me.Posts.length}</div>,
->      <div key="following">팔로잉<br />{me.Followings.length}</div>,
->      <div key="following">팔로워<br />{me.Followers.length}</div>,
    ]}
>
```
dummyUser에서 만든 dummy 데이터 사용가능



⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 setText('') 의 위치에 관하여
---
현재는 다음과 같이 addPost를 한 다음 setText('')를 통해서 text를 지우는 형태를 띠고 있다.       하지만 이 코드의 문제는 보낸 다음 백엔드에서 문제가 있다고 알려오면 이미 입력한 메세지를 지워버린 후라는 것이다.        
components/PostForm.js      
```javascript
const onSubmit = useCallback(() => {
    dispatch(addPost(text));
    setText('');
},[text])
```
따라서 수정할 필요가 있다.      

```javascript
import React, { useCallback, useRef, useEffect } from "react";
const PostForm = () => {
    const { imagePaths, addPostDone } = useSelector((state) => state.post);
    useEffect(() => {
            if (addPostDone) {
                setText('');
            }
        }, [addPostDone])
}
```


⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>       

## 🌟 게시물 내용을 입력 받아서 게시하는 방법
---
지금은 dummyData이므로 참고만       
<br/>

sagas/post.js       
```javascript
function* addPost(action) {
    try {
        // const result = yield call(addPostAPI, action.data);
        yield delay(1000);
        yield put({
            type: ADD_POST_SUCCESS,
->          data: action.data,
        })
    } catch (err) {
        ...
    }
}
```


⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 shortid Library
---
유저, 게시물, 댓글 등 id가 매번 달라야하기 때문에 때에 따라 랜덤하게 id를 지정해주는 shortid 라이브러리를 사용하면 편하다.      
```javascript
npm i shortid
```
<br/>

reducers/post.js
```javascript
import shortId from 'shortid';

const dummyPost = (data) => ({
    id: shortId.generate(),
    ...
})

```