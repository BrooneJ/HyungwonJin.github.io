---
layout: post
title: "[javascript] callback"
subtitle: "js"
categories: develop
tags: front
comments: false
---

![1-1](/assets/img/web/js.png)     

참고: <https://ko.javascript.info/callbacks>        

# 콜백(callback)
---
javascript에서는 비동기(asynchronous) 동작을 스케줄링 할 수 있다.       

예를들어 함수의 밑에 바로 해당 스크립트 속의 함수를 사용하면 실행이 되지 않는다.        

이런 script를 불러오는 element를 만들고
```js
function loadScript(src) {
  // <script> 태그를 만들고 페이지에 태그를 추가합니다.
  // 태그가 페이지에 추가되면 src에 있는 스크립트를 로딩하고 실행합니다.
  let script = document.createElement('script');
  script.src = src;
  document.head.append(script);
}
```

아래와 같이 script 속의 newFunction함수를 바로 실행하면 실행이 되지 않는다.     
```js
loadScript('/my/script.js'); // script.js엔 "function newFunction() {…}"이 있습니다.

newFunction(); // 함수가 존재하지 않는다는 에러가 발생합니다!
```
왜냐하면 아직 스크립트가 완전히 로딩이 되기 전에 스크립트 속의 함수를 사용했기 때문에 실행할 수 없는 것이다.        

따라서 이럴 때 콜백(callback)을 사용해야한다.       
```js
function loadScript(src, callback) {
  let script = document.createElement('script');
  script.src = src;

  script.onload = () => callback(script);
  // 로딩을 완료한 후에 callback을 실행함       

  document.head.append(script);
}
```
이와 같이 onload를 실행한 후에 
```js
loadScript('/my/script.js', function() {
  // 콜백 함수는 스크립트 로드가 끝나면 실행됩니다.
  newFunction(); // 이제 함수 호출이 제대로 동작합니다.
  ...
});
```
위와 같이 script 속의 함수를 실행하면 정상적으로 작동한다.      
즉, 콜백함수는 나중에 호출할 함수를 의미한다.       

이러한 방식을 **콜백 기반** 프로그래밍이라고 한다.      
따라서 이러한 콜백기반의 무언가를 비동기적으로 수행하는 함수는 함수 내 동작이 모두 처리된 후 실행되어야 하는 함수가 들어갈 콜백을 인수로 반드시 제공해야 합니다.        

## 콜백 속의 콜백
---
스크립트를 순차적으로 불러오기 위해서는 어떻게 해야할까?        
답은 콜백함수 안에 또 콜백함수를 넣어주는 것이다.       
```js
loadScript('/my/script.js', function(script) {
  loadScript('/my/script2.js', function(script) {
    loadScript('/my/script3.js', function(script) {
      // 세 스크립트 로딩이 끝난 후 실행됨
    });
  })
});
```
이와 같은 함수의 모양을 가진다. 하지만 불러올 스크립트가 100개가 되면 이러한 방법은 좋지않다는 것을 직감할 수 있다.     

## 에러처리
---
지금까지의 코드에서는 script를 불러오는 도중 error가 발생해도 따로 처리를 해주지 않았지만 다음과 같은 방법으로 error가 발생하면 처리해줄 수 있다.       
```js
function loadScript(src, callback) {
  let script = document.createElement('script');
  script.src = src;

  script.onload = () => callback(null, script);
  script.onerror = () => callback(new Error(`${src}를 불러오는 도중에 에러가 발생했습니다.`));

  document.head.append(script);
}
```
onerror를 통해서 error를 발견하면 따로 처리해 줄 수 있게된다.       

하지만 이 방법도 callback hell에 빠진다는 문제가 있다.      
```js
loadScript('1.js', function(error, script) {

  if (error) {
    handleError(error);
  } else {
    // ...
    loadScript('2.js', function(error, script) {
      if (error) {
        handleError(error);
      } else {
        // ...
        loadScript('3.js', function(error, script) {
          if (error) {
            handleError(error);
          } else {
            // 모든 스크립트가 로딩된 후, 실행 흐름이 이어집니다. (*)
          }
        });

      }
    })
  }
});
```
이런 식으로 경우의 수를 모두 생각해주면 끝이 없게 된다.     