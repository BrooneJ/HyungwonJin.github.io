---
layout: post
title: "210902-TIL(React)"
subtitle: "TIL-210902"
categories: til
tags: til
comments: false
---

# 📝 공부할 거리
---



⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 post Unauthorize error
---
### 🚔 문제 발견 
---
![1-1](/assets/img/web/2021-09-02/1-1.png)          
브라우저는 3000번 포트, 백엔드는 3065 포트를 사용하고 있다. 따라서 현재는 도메인이 다르기 때문에 cookie가 전달되지 않고 있어 백엔드에서는 post를 누가 보낸 것인지 알 방법이 없다.       
그래서 현재 로그인하고 있음에도 불구라고 401 Unauthorized라는 메세지를 받게 되었다.     

### 🔍 해결 방법
---
1. proxy로 해결하는 방법
2. cors로 해결하는 방법     

여기서는 cors로 해결하는 방법을 사용한다.       
🗂 back/app.js
```javascript
app.use(cors({
    origin: '*', // Access-controll-allow-origin
->  credentials: true, // Access-controll-allow-credentials
}));
```
🗂 sagas/post.js        
```javascript
function addPostAPI(data) { // 제네레이터 아님
    return axios.post('/post', { content: data }, {
        withCredentials: true,
    });
}
```
withCredentials를 true로 해주면 쿠키도 같이 전송된다.

<br/>

또는 

🗂 sagas/index.js
```javascript
axios.defaults.withCredentials = true;
```
위와 같은 코드를 입력해두면 모든 API에 직접 입력할 필요가 없어진다.     
<br/>

하지만 이렇게하면 두번째 문제가 발생하게 된다.      
![1-1](/assets/img/web/2021-09-02/1-2.png)          

이는 withCredentials를 true로 해줬기 때문에 일어나는 문제이다.      
보안을 철저하게 하기 위해서 orgin에 아무나 허용되지 않게 정확한 주소를 적어달라는 것이다. 

🗂 sagas/app.js
```javascript
app.use(cors({
    origin: '*',
    credentials: true,
}));
```

### ✅ 해결
---
![1-1](/assets/img/web/2021-09-02/1-3.png)          
위의 그림과 같이 status의 상태가 200번 대로 바뀌는 것을 볼 수 있다.     


⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 로그인 후 로그인 상태를 유지하는 방법
---
메모리에 저장된 쿠키를 통해서 한번 로그인 한 후에 새로고침을 해도 로그인 상태를 유지하도록 만들 수 있다.        

1. 홈화면에 접근        
🗂 page/index.js        
```javascript
const Home = () => {
    ...
    useEffect(() => {
            dispatch({
                type: LOAD_MY_INFO_REQUEST,
            })
            dispatch({
                type: LOAD_MY_INFO_REQUEST,
            });
        }, []);
}
```
위의 코드로 홈에 접근하면 로그인 유저를 불러오는 LOAD_MY_INFO_REQUEST 액션과 게시물을 불러오는 LOAD_MY_INFO_REQUEST 액션이 동시에 실행됨        

2. LOAD_MY_INFO_REQUEST 액션을 보낸 후 saga로 보내지면      
🗂 saga/user.js
```javascript
function loadUserAPI() {
    return axios.get('/user'); // 정보를 변경하거나 하는 것이 아니기 떄문에 get
}

function* loadUser(action) {
    try {
        const result = yield call(loadUserAPI, action.data);
        yield put({
            type: LOAD_MY_INFO_SUCCESS,
            data: result.data,
        })
    } catch (err) {
        yield put({
            type: LOAD_MY_INFO_FAILURE,
            error: err.response.data,
        })
    }
}
```
위의 제네레이터를 통해서 result에 담긴 데이터가 http://localhost:3000/user로 보내진다.      
<br/>

사실 백엔드를 다 설정 해놓았으면 프론트엔드에서의 역할은 여기서 끝      
(하지만 현재 백엔드에서 프론트엔드로 빼거나 추가해야할 정보가 있으므로..)       
<br/>

3. 백엔드에서는 
🗂 routes/user.js       
```javascript
router.get('/', async (req, res, next) => { // get /user
    try {
        if (req.user) {
            const fullUserWithoutPassword = await User.findOne({
                where: { id: req.user.id },
                attributes: {
                    exclude: ['password']
                },
                include: [{
                    model: Post,
                    attributes: ['id'],
                }, {
                    model: User,
                    as: 'Followings',
                    attributes: ['id'],
                }, {
                    model: User,
                    as: 'Followers',
                    attributes: ['id'],
                }]
            })
            res.status(200).json(fullUserWithoutPassword);
        } else {
            res.status(200).json(null);
        }
    } catch (error) {
        console.error(error);
        next(error);
    }
})
```
fullUserWithoutPassword라는 변수에 user.id를 통해서 유저를 찾고 해당유저의 post, Followings, Followers를 프론트로 보내준다.     

⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 게시글을 원하는 단위 만큼 끊어서 가져오기
---
routes/posts.js     
```javascript
const posts = await Post.findAll({
        limit: 10, // 몇개씩 가져올 것인가?
        offset: 0, // 몇번 부터 가져올 것인가?
    });
```

⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 SequelizeDatabaseError: Unknown column 'Images.PostId' in 'field list' 문제
---

### 🚔 문제 발견 
---
게시물을 작성해도 화면이 나타나지 않는 것을 발견        
즉, DB에서 post들을 불러오지 못하는 현상을 발견     

### 🔍 해결 방법
---
![1-1](/assets/img/web/2021-09-02/1-6.png)        
![1-1](/assets/img/web/2021-09-02/1-7.png)        
위의 이미지에는 이미 해결한 후이지만        
redux에서 LOAD_POST_FAILURE이라는 액션과 브라우저의 network 창에서는 Status Code 500이 계속 표시되었다.     
<br/>

그래서 redux와 redux-saga의 코드를 확인해보았지만 오류는 없어보였다.        

그다음으로 백엔드 쪽을 살펴보았다.      
![1-1](/assets/img/web/2021-09-02/1-4.png)        
알수 없는 Images.PostId 라는 column이 field list에 있다라는 에러가 발생했지만 무슨 뜻인지 이해하지 못했다.      

왜냐하면 대부분 오류가 있을 경우는 오타이거나 빠진 부분이 있거나 했기 떄문에 데이터베이스에 빠진 요소가 있을 것이라고 생각하지 못했었기 때문이다.       

구글에 **'SequelizeDatabaseError: Unknown column 'Images.PostId' in 'field list'**를 검색했을 때 문제는 대부분 2가지 라고 했다.     

1. DB에 column이 없는 경우(설마 이런일이?)      
2. 사용자가 준 데이터가 문자열로 표시되어 있지 않은 경우        

2번은 내가 직접 데이터베이스의 값을 설정하거나 한게 아니라 sequelize에서 만들어 주고 있기 때문에 아니라고 생각해서 DB를 살펴보기로 했다.        

MySQLWorkbench를 켜고 Images 테이블을 보았더니 있어야할 PostId가 보이지 않았다.

>🗂 back/models/image.js
>```javascript
>module.exports = (sequelize, DataTypes) => {
>    const Image = sequelize.define('Image', { // MySQL네믐 Image 테이블 생성
>        // MySQL에서 만들어주는 기본 id가 있다.
>        src: {
>            type: DataTypes.STRING(200),
>            allowNull: false,
>        },
>    }, {
>        charset: 'utf8',
>        collate: 'utf8_general_ci', // 한글 저장
>    });
>    Image.associate = (db) => {
>        db.Image.belongsTo(db.Post);
>    };
>    return Image;
>}
>```
>이 때 분명 다 만들어놨는데 왜 PostId가 생성되지 않은 것인지는 아직도 알 수 없는 수수께끼...(모든 테이블에서 다 PostId가 생성되지 않았었다.)

그래서 데이터베이스를 DROP 하고 새로 생성했더니 잘 작동하게 되었다.

### ✅ 해결
---
![1-1](/assets/img/web/2021-09-02/1-6.png)        
![1-1](/assets/img/web/2021-09-02/1-7.png)      
이제는 문제가 일어나지 않는다!      

⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

