---
layout: post
title: "210929-TIL(javascript)"
subtitle: "TIL-210929"
categories: til
tags: til
comments: false
---

## splice 사용법
---
```js
const target = ['가','나','다','라','마'];
target.splice(1, 1);
// ['가','다','라','마']
target.splice(2, 2);
// ['가','나','마']
target.splice(1);
// ['나','다','라','마'];
target.splice(1, 3, '타', '파');
// ['가','타', '파', '마']

// 배열 사이에 요소 추가하기
target.splice(2, 0, '바');
// ['가','나', '바', 다','라','마']
```

## 배열에서 원소 찾기(includes())
---
```js
const target = ['가','나','다','라','마'];
const result = target.includes('다');
// true
const result = target.includes('카');
// false
```

## 배열에서 원소의 위치 찾기(indexOf())
---
```js
const target = ['라','나','다','라','다'];
const result = target.indexOf('다');
// 2 앞에서 부터 찾으니 2임 앞에서 발견되면 실행 종료함
const result = target.lastIndexOf('라');
// 3 뒤에서 부터 찾으니까 0이 아님
const result = target.indexOf('가');
// -1 없으면 -1로 표기함
```

## false가 되는 조건문 6가지
---
1. 빈문자열
2. 0
3. Boolean false
4. null
5. undefined
6. NaN

## 객체리터럴
---
따옴표 붙이는 방법      
```js
const obj = {
    bc: 'hello',
    '2ca': 'hello',
    'c a': 'hello',
    'c-a': 'hello',
}
console.log(obj.bc);
console.log(obj['bc']);
console.log(obj[bc]); // bc의 값인 hello를 넣는 모양이 됨
console.log(obj.2ca) // X
console.log(obj['2ca']) // O
```

## 객체비교
---
원시값과 차이점     
```js
{} === {} // false
// 새로운 객체와 새로운 객체를 비교하니까 다르다.
```

## parseInt & Number 차이점
---
```js
parseInt('123') // 123
Number('123') // 123

parseInt('3.14') // 3
Number('3.14') // 3.14

parseInt('3월') // 3
Number('3월') // NaN
```

## and, or
---
&&: 둘 다 true여야 true     
||: 둘 다 false여야 false       
```js
true && true // true
true && false // false
false && true // false

false || false // false
false || true // true
true || false // true
```

## 고차 함수(반복 줄이기)
---
함수명이 들어갈 자리에 함수가 들어가면 고차함수로 바꿔줘야한다.     
<br/>

1. 중복이 많은 상태
```js
document.querySelector('#num-0').addEventListener('click', () => {
    if(operator){
        numTwo += '0';
    }else{
        numOne += '0';
    }
    $result.value += '0'
});

...

document.querySelector('#num-0').addEventListener('click', () => {
    if(operator){
        numTwo += '9';
    }else{
        numOne += '9';
    }
    $result.value += '9'
});
```
<br/>

2. 함수로 빼주기
```js
const onClickNumber = (number) => {
    if(operator){
        numTwo += number;
    }else{
        numOne += number;
    }
    $result.value += number;
    return undefined;
}

document.querySelector('#num-0').addEventListener('click', onClickNumber('0'));
...
document.querySelector('#num-0').addEventListener('click', onClickNumber('9'));
```
현재 상태는 onClickNumber('0')이 undefined인 상태이다.      

3. 따라서 고차함수로 변환          
```js
// const onClickNumber = (number) => {
//     return () => {
//         if(operator){
//         numTwo += number;
//         }else{
//             numOne += number;
//         }
//         $result.value += number;
//     }
// }

// {와 return이 만나면 생략가능함
const onClickNumber = (number) => () => {
    if(operator){
    numTwo += number;
    }else{
        numOne += number;
    }
    $result.value += number;
}

document.querySelector('#num-0').addEventListener('click', onClickNumber('0'));
...
document.querySelector('#num-9').addEventListener('click', onClickNumber('9'));
```

4. event.target.textContent를 사용
```js
const onClickNumber = (event) => {
    if(operator){
        numTwo += event.target.textContent; // 함수로 번호를 적을 필요없이 클릭한 숫자를 가져옴
    } else {
        numOne += event.target.textContent;
    }
    $result.value += event.target.textContent;
}

document.querySelector('#num-0').addEventListener('click', onClickNumber);
...
document.querySelector('#num-9').addEventListener('click', onClickNumber);
```
<br/>

고차함수 퀴즈
```js
const hof = (a) => (b) => (c) => {
    return a + (b * c);
};

const first= hof(3);

const second = first(4);

const third = second(5);

console.log(third);
```

```js
const hof = (3) => {
    return (4) => {
        return (5) => {
            return 3 + (4 * 5);
        }
    }
}
```

## 다중 클릭 중복 데이터 전송 방지
---
## 🚔 문제 발견
---
현재 단어를 업로드할 때 클릭을 여러번 하면 단어도 여러번 중복해서 업로드 되는 문제가 있었다.        
![img](https://i.imgur.com/EJggmj6.gif)

## 🔍 해결 방법
---
따라서 js로 한번 등록 버튼을 클릭하면 그 다음부터는 등록 버튼이 비활성화 되도록 만들어주었다.           
🗂 src/client/js/preventClick.js        
```js
const preventBtn = document.querySelector('input[type="submit"]');
let clickable = true;

const prev = (event) => {
    if (clickable) {
        clickable = false;
    } else {
        event.preventDefault();
    }
}

if (preventBtn) {
    preventBtn.addEventListener('click', prev);
}
```
## ✅ 해결
---
![img](https://i.imgur.com/jTRdkKF.gif)
위의 그림과 같이 여러번 클릭해도 한번만 업로드 된다.