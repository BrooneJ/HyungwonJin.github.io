---
layout: post
title: "[javascript] Promise"
subtitle: "js"
categories: develop
tags: front
comments: false
---

![1-1](/assets/img/web/js.png)     

# Promise
---
Promise는 다음과 같은 구조를 가진다.
```js
let promise = new Promise(function(resolve, reject) {
  // executor (promise가 호출되면 자동으로 실행되는 함수)
});
```
Promise는 js에서 자체적으로 제공하는 resolve와 reject를 인자로 가진다. 따라서 개발자가 따로 만들어 줄 필요가 없다. 다만 둘 중 하나 또는 둘 다를 호출해야햔다.       

## state
---
Promise는 실행하는 동안 state가 변화한다.       
예를들면 처음에는 pending이라는 state를 가지고 있다가 응답에 따라서 **fulfilled** 혹은 **rejected**를 state 값으로 갖는다.      
![img](https://i.imgur.com/8sVBrau.png)

하지만 이렇게 처리한 state와 result는 내부 프로퍼티에 있기 때문에 개발자가 직접적으로 접근할 수 없다.       

## then
---
then은 promise에서 가장 기본이 되는 메서드이다.         
다음과 같은 형태를 가지고 있으며   
```js
promise.then(
  function(result) { /* 결과(result)를 다룹니다 */ },
  function(error) { /* 에러(error)를 다룹니다 */ }
);
```
아래와 같이 사용한다.       
- fulfilled 인 경우     
    ```js
    let promise = new Promise(function(resolve, reject) {
      setTimeout(() => resolve("done!"), 1000);
    });

    // resolve 함수는 .then의 첫 번째 함수(인수)를 실행합니다.
    promise.then(
      result => alert(result), // 1초 후 "done!"을 출력
      error => alert(error) // 실행되지 않음
    );
    ```

- rejected 인 경우
    ```js
    let promise = new Promise(function(resolve, reject) {
      setTimeout(() => reject(new Error("에러 발생!")), 1000);
    });

    // reject 함수는 .then의 두 번째 함수를 실행합니다.
    promise.then(
      result => alert(result), // 실행되지 않음
      error => alert(error) // 1초 후 "Error: 에러 발생!"를 출력
    );
    ```

## Promise 응용
---
- 콜백 기반의 함수
    ```js
    function loadScript(src, callback) {
      let script = document.createElement('script');
      script.src = src;

      script.onload = () => callback(null, script);
      script.onerror = () => callback(new Error(`${src}를 불러오는 도중에 에러가 발생함`));

      document.head.append(script);
    }
    ```

- Promise 기반의 함수
    ```js
    function loadScript(src) {
      return new Promise(function(resolve, reject) { // new Promise를 사용하고
        let script = document.createElement('script');
        script.src = src;
        // resolve, reject를 사용해서 처리한다.
        script.onload = () => resolve(script);
        script.onerror = () => reject(new Error(`${src}를 불러오는 도중에 에러가 발생함`));

        document.head.append(script);
      });
    }
    ```

- 사용법
    ```js
    let promise = loadScript("https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.js");
    // promise에는 객체 Promise가 들어있음
    promise.then(
      script => alert(`${script.src}을 불러왔습니다!`), // 그 객체가 fulfilled 상태이면 실행
      error => alert(`Error: ${error.message}`) // 그 객체가 rejected 상태이면 실행
    );

    promise.then(script => alert('또다른 핸들러...')); // 성공한 경우에만 실행
    ```

## Promise chaining
---
Promise Chaining이란 다음과 같은 형태를 말한다.     
```js
new Promise(function(resolve, reject) {

  setTimeout(() => resolve(1), 1000); 

}).then(function(result) { // result에는 resolve에서 반환한 Promise가 들어있음
  alert(result); // 1
  return result * 2;

}).then(function(result) { 
  // result에는 이전 then에서 반환한 Promise result * 2를 가지고 있음
  alert(result); // 2
  return result * 2;

}).then(function(result) {

  alert(result); // 4
  return result * 2;

});
```
즉 다음 그림과 같은 흐름이다.       
![img](https://i.imgur.com/4FaDvJk.png)

## Promise API
---

### Promise.all
---
아래와 같이 Promise.all은 이터러블 객체인 인자를 받는다.     
```js
let promise = Promise.all([...promises...]);
```
이터러블 객체의 처리가 끝나면 객체 안의 모든 promise 결과값을 받은 배열이 새로운 promise의 result가 된다.        
또한 result 요소의 순서는 Promise.all에 전달되는 순서에 상응한다. 먼저 적힌 promise가 처리시간에 오래 걸려 늦게 결과가 나오더라도 표기될 때에는 처음 들어온 순서와 같은 순번에 표기 된다.       

```js
Promise.all([
  new Promise((resolve, reject) => setTimeout(() => resolve(1), 1000)),
  new Promise((resolve, reject) => setTimeout(() => reject(new Error("에러 발생!")), 2000)),
  new Promise((resolve, reject) => setTimeout(() => resolve(3), 3000))
]).catch(alert); // Error: 에러 발생!
```
Promise.all은 promise 중 하나라도 거부되면 전체가 거부된다.

# async / await
---
async는 function의 앞에 위치하며
```js
async function f() {
  return 1;
}
```
async를 붙이면 해당 함수는 항상 Promise를 반환한다.     

function 앞에 async 키워드를 추가하면 두 가지 효과가 있습니다.          

1. 함수는 언제나 프라미스를 반환합니다.     
2. 함수 안에서 await를 사용할 수 있습니다.      
프라미스 앞에 await 키워드를 붙이면 자바스크립트는 프라미스가 처리될 때까지 대기합니다. 처리가 완료되면 조건에 따라 아래와 같은 동작이 이어집니다.      

1. 에러 발생 – 예외가 생성됨(에러가 발생한 장소에서 throw error를 호출한 것과 동일함)       
2. 에러 미발생 – 프라미스 객체의 result 값을 반환       
async/await를 함께 사용하면 읽고, 쓰기 쉬운 비동기 코드를 작성할 수 있습니다.       

async/await를 사용하면 promise.then/catch가 거의 필요 없습니다. 하지만 가끔 가장 바깥 스코프에서 비동기 처리가 필요할 때같이 promise.then/catch를 써야만 하는 경우가 생기기 때문에 async/await가 프라미스를 기반으로 한다는 사실을 알고 계셔야 합니다. 여러 작업이 있고, 이 작업들이 모두 완료될 때까지 기다리려면 Promise.all을 활용할 수 있다는 점도 알고 계시기 바랍니다.

