---
layout: post
title: "210830-TIL(css)"
subtitle: "TIL-210830"
categories: til
tags: til
comments: false
---

<br/>

## 🌟 css
---
overflow : hideen(영역보다 길어지면 영역을 넘어가는 부분을 숨긴다.)         
scroll(항상 스크롤)       
auto(영역보다 길어지면 자동으로 스크롤 만든다);      

word-break:break-all; => div안의 텍스트가 밖으로 빠져 나갈때       
text-overflow: clip; => 사이즈에 맞게 문장을 자름       
text-overflow: ellipsis => ...으로 자름     


flex-wrap:      
![1-1](/assets/img/web/2021-08-30/flex-wrap.svg)        
no-wrap: 줄 바꾸지 않고 한줄로 표시      
wrap: Item이 Container을 넘어설 경우 다음줄에 줄바꿈하여 표시함     
wrap-reverse: Item이 Container을 넘어설 경우 역방향으로 줄바꿈하여 표시함       

⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 mysql 관계 설정하기
---
1 대 1 관계인지, 1 대 다 관계인지, 다 대 다 관계인지 생각해서 설정해주어야 한다.        

예를 들어 user 모델에서 살펴보면        
🗂 models/user.js       
```javascript
User.associate = (db) => {
    db.User.hasMany(db.Post);
    db.User.hasMany(db.Comment);
    db.User.belongsToMany(db.Post, { through: 'Like', as: 'Liked' });
    db.User.belongsToMany(db.User, { through: 'Follow', as: 'Followers', foreignKey: 'FollowingId' });
    db.User.belongsToMany(db.User, { through: 'Follow', as: 'Followings', foreignKey: 'FollowerId' });
    // through는 중간 테이블의 이름을 바꾸는 것, as로 db 유저에 대한 이름 변경, foreignKey는 column의 이름을 지정
};
```
- **hasMany**는 1 대 다 관계를 나타낸다.        
따라서 user 한명이 여러 post와 comment를 가질 수 있기 때문에 1 대 다 관계인 hasMany를 설정해주는 것은 타당하다.         
- **belongsToMany**는 다 대 다 관계를 나타낸다.     
user가 여러 post에 좋아요를 누를 수 있고, post는 여러 user로부터 좋아요를 받을 수 있으므로 다 대 다 관계가 성립한다.        
    > through는 다 대 다 관계에서 사용되는 중간테이블의 이름을 직접 설정하는 기능       
    > as는 db유저에 대한 이름       
    > foreignKey는 각 데이터를 대표하는 column의 이름을 지정하는 기능       

🗂 models/post.js
```javascript
Post.associate = (db) => {
    db.Post.belongsTo(db.User);
    db.Post.belongsToMany(db.Hashtag);
    db.Post.hasMany(db.Comment);
    db.Post.hasMany(db.Image);
    db.Post.belongsToMany(db.User, { through: 'Like', as: 'Likers' };
    db.Post.belongsTo(db.Post, { as: 'Retweet' });
};
```
- **belongsTo**는 1 대 1 관계를 나타낸다.       
post는 user 1명에게 속해있기 때문이다.
⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## ⚠️ throw new AssociationError(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`)
---
![1-1](/assets/img/web/2021-08-30/1-3.png)        
위와 같은 에러가 발생한다면 **belongsToMany**부분에서 option을 설정해주지 않았을 가능성이 있다.     
```javascript
db.Post.belongsToMany(db.Hashtag);
// 위와 같이 db만 지정해주면 에러가 발생한다.

db.Post.belongsToMany(db.Hashtag, { through: 'PostHashtag' });
// 위와 같이 through를 적어서 중간테이블 이름을 설정해주면 해결된다.        
```
⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰🏔🗻🌋🏝⛰      
<br/>

## 🌟 데이터베이스 생성 시 에러
---
모델을 다 만들고 나서 데이터베이스를 생성하기 위해서 node app을 실행 했을 때 다음과 같이 나온다면       
![1-1](/assets/img/web/2021-08-30/1-4.png)      
다음 명령어를 입력한다.     
```
npx sequelize db:create
```
![1-1](/assets/img/web/2021-08-30/1-5.png)          
위 그림과 같이      
Database react-nodebird created.        
라고 데이터베이스가 생성되었음을 알 수 있다.        