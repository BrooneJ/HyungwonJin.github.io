---
layout: post
title: "210807-TIL(React.js)"
subtitle: "TIL-210807"
categories: til
tags: til
comments: false
---

## 반복되는 부분을 나타내는 방법 (map)
---
```javascript
{['사과', '바나나','귤','감','배','밤'].map() => {
    return (
        <li>{v}</li>
    );
}}
// <li>사과</li>
// <li>바나나</li>
// <li>포도</li>
// <li>귤</li>
// <li>감</li>
// <li>배</li>
// <li>밤</li>

//또는

{[
    { fruit: '사과', taste: '맛있다'},
    { fruit: '바나나', taste: '맛없다'},
    { fruit: '귤', taste: '시다'},
    { fruit: '감', taste: '떫다'},
    { fruit: '배', taste: '달다'},
    { fruit: '밤', taste: '몰라'},
].map((v) => {
    return (
        <li><b>{v.fruit}</b> - {v.taste}</li>
    );
})};
// <li><b>사과</b> - 맛있다</li>
// <li><b>바나나</b> - 맛없다</li>
// <li><b>귤</b> - 시다</li>
// <li><b>감</b> - 떫다</li>
// <li><b>배</b> - 달다</li>
// <li><b>밤</b> - 몰라</li>

```

## 고유한 값 key의 중요성
---
key값을 넣어주지 않으면 다음과 같은 error가 발생한다.       
![그림 1-1](/assets/img/web/2021-08-07/1-1.png)         
```javascript
{[
    { fruit: '사과', taste: '맛있다'},
    ...
].map((v) => {
    return (
->      <li key={v.fruit}><b>{v.fruit}</b> - {v.taste}</li>
        // key 값을 넣어주면 error가 없어진다.
        // <li><b>{v.fruit}</b> - {v.taste}</li>
    );
})};
```

## Component 쪼개는 방법
---
NumberBaseball.jsx
```javascript
import Try from "./Try";

fruits = [ // 빼 줄 수 있음
        { fruit: '사과', taste: '맛있다' },
        { fruit: '바나나', taste: '맛없다' },
        { fruit: '귤', taste: '시다' },
        { fruit: '감', taste: '떫다' },
        { fruit: '배', taste: '달다' },
        { fruit: '밤', taste: '몰라' },
    ]

{this.fruits.map((v, i) => {
    return (
->      <Try value={v} index={i} />
        // Try.jsx로 넘기기 위해
    );
})};
```
<br/>

Try.jsx
```javascript
import React, { Component } from "react";

class Try extends Component {
    render() {
        return (
            <li>
                <b>{this.props.value.fruit}</b> - {this.props.index}
                // NumberBaseball.jsx에서 받은 value와 index를 받아옴
                // props가 있으면 부모가 있다고 생각
                <div>컨텐츠</div>
                <div>컨텐츠1</div>
                <div>컨텐츠2</div>
                <div>컨텐츠3</div>
            </li>
        )
    }
}

export default Try;
```

## react에서 rendring하는 기준
---
기본적으로 state와 props가 바꼈을 때 다시 rendering한다.
```javascript
const arr = []
arr.push(1);
//을 하면 
arr === arr //의 결과가 true가 나오기 때문에 rendering을 하지 않음
// 따라서
const arr2 = [...arr, 1] //과 같이 얕은 복사 후에 새로운 값을 넣음
//그러면 
arr === arr2 //는 false가 나오므로 react가 새로 rendering을 함

// 따라서 상태변화가 있을 때는
this.setState((prevState) => { // 옛날 데이터로 현재 데이터를 바꿀때는 prevState를 써야함
        return {
            tries: [...prevState.tries, { try: value, result: `${strike} 스트라이크, ${ball} 볼 입니다.` }],
            value: '',
        }
    })
}
    //이와 같이 넣어줘야한다.
```
즉, react는 변화가 있을 때만(이전과 비교해서 false일 때) 새롭게 rendering함

## class -> Hook
---
# Class일 때
```javascript
import React, { Component } from "react";
import Try from "./Try";

function getNumbers() {
    const candidate = [1, 2, 3, 4, 5, 6, 7, 8, 9];
    const array = [];
    for (let i = 0; i < 4; i += 1) {
        const chosen = candidate.splice(Math.floor(Math.random() * (9 - i)), 1)[0];
        array.push(chosen);
    }
    return array;
}

class NumberBaseball extends Component {
    state = {
        result: '',
        value: '',
        answer: getNumbers(),
        tries: [],
    }

    onSubmitForm = (e) => {
        e.preventDefault();
        const { value, answer, tries } = this.state;
        if (value === answer.join('')) {
            this.setState({
                result: "홈런!",
                tries: [...tries, { try: value, result: '홈런!' }],
            })
            alert('게임을 다시 시작합니다.');
            this.setState({
                value: '',
                answer: getNumbers(),
                tries: [],
            });
        } else { // 답 틀렸으면
            const answerArray = value.split('').map((v) => parseInt(v));
            let strike = 0;
            let ball = 0;
            if (tries.length >= 9) {
                this.setState({
                    result: `10번 넘게 틀려서 실패! 답은 ${answer.join(",")}였습니다!`,
                })
                alert('게임을 다시 시작합니다.');
                this.setState({
                    value: '',
                    answer: getNumbers(),
                    tries: [],
                });
            } else {
                for (let i = 0; i < 4; i += 1) {
                    if (answerArray[i] === answer[i]) {
                        strike += 1;
                    } else if (answer.includes(answerArray[i])) {
                        ball += 1;
                    }
                }
                this.setState({
                    tries: [...tries, { try: value, result: `${strike} 스트라이크, ${ball} 볼 입니다.` }],
                    value: '',
                })
            }
        }
    };

    onChangeInput = (e) => {
        this.setState({
            value: e.target.value,
        })
    };


    render() {
        const { value, tries, result } = this.state;
        return (
            <>
                <h1>{result}</h1>
                <form onSubmit={this.onSubmitForm}>
                    <input maxLength={4} value={value} onChange={this.onChangeInput} />
                </form>
                <div>시도: {tries.length}</div>
                <ul>
                    {tries.map((v, i) => {
                        return (
                            <Try key={`${i + 1}차 시도`} tryInfo={v} />
                        );
                    })}
                </ul>
            </>
        )
    }
}

export default NumberBaseball;

```

# Hook일 때 

```javascript
import React, { useState } from "react"; // useState를 import하면 편리함
import Try from "./Try";

function getNumbers() {
    const candidate = [1, 2, 3, 4, 5, 6, 7, 8, 9];
    const array = [];
    for (let i = 0; i < 4; i += 1) {
        const chosen = candidate.splice(Math.floor(Math.random() * (9 - i)), 1)[0];
        array.push(chosen);
    }
    return array;
}

const NumberBaseball = () => {
    const [result, setResult] = useState('');
    const [value, setValue] = useState('');
    const [answer, setAnswer] = useState(getNumbers());
    const [tries, setTries] = useState([]);

    const onSubmitForm = (e) => {
        e.preventDefault();
        if (value === answer.join('')) {
            setResult("홈런!");
            setTries((prevTries) => {
                return [...prevTries, { try: value, result: "홈런!" }]
            })
            // this.setState((prevState) => {
            //     return {
            //         result: "홈런!",
            //         tries: [...prevState.tries, { try: value, result: '홈런!' }],
            //     }
            // })
            alert('게임을 다시 시작합니다.');
            setValue("");
            setAnswer(getNumbers());
            setTries([]);
            // this.setState({
            //     value: '',
            //     answer: getNumbers(),
            //     tries: [],
            // });
        } else { // 답 틀렸으면
            const answerArray = value.split('').map((v) => parseInt(v));
            let strike = 0;
            let ball = 0;
            if (tries.length >= 9) {
                setResult(`10번 넘게 틀려서 실패! 답은 ${answer.join(",")}였습니다!`)
                // this.setState({
                //     result: `10번 넘게 틀려서 실패! 답은 ${answer.join(",")}였습니다!`,
                // })
                alert('게임을 다시 시작합니다.');
                setValue('');
                setAnswer(getNumbers());
                setTries([]);
                // this.setState({
                //     value: '',
                //     answer: getNumbers(),
                //     tries: [],
                // });
            } else {
                for (let i = 0; i < 4; i += 1) {
                    if (answerArray[i] === answer[i]) {
                        strike += 1;
                    } else if (answer.includes(answerArray[i])) {
                        ball += 1;
                    }
                }
                setTries((prevTries) => [...prevTries, { try: value, result: `${strike} 스트라이크, ${ball} 볼 입니다.` }])
                setValue("");
                // this.setState((prevState) => {
                //     return {
                //         tries: [...prevState.tries, { try: value, result: `${strike} 스트라이크, ${ball} 볼 입니다.` }],
                //         value: '',
                //     }
                // })
            }
        }
    };

    const onChangeInput = (e) => {
        setValue(e.target.value);
    };

    return (
        <>
            <h1>{result}</h1>
            <form onSubmit={onSubmitForm}>
                <input maxLength={4} value={value} onChange={onChangeInput} />
            </form>
            <div>시도: {tries.length}</div>
            <ul>
                {tries.map((v, i) => {
                    return (
                        <Try key={`${i + 1}차 시도`} tryInfo={v} />
                    );
                })}
            </ul>
        </>
    )
}

export default NumberBaseball;

```

## shouldComponentUpdate(성능 테스트, class에서 쓸 수 있음.)
---
변화가 있는 부분만 렌더링하고 나머지 부분은 놔둠
```javascript
import React, { Component } from "react";

class Test extends Component {
    state = {
        counter: 0,
    }

    shouldComponentUpdate(nextProps, nextState, nextContext) {
        if (this.state.counter !== nextState.counter) {
            // 현재 state와 다음 state를 비교함
            return true;
        }
        return false;
    }

    onClick = () => {
        this.setState({});
    };

    render() {
        console.log("랜더링", this.state);
        return (
            <div>
                <button onClick={this.onClick}>클릭</button>
            </div>
        )
    }
}

export default Test;
```

## PureComponent (class에서 쓸 수 있음.)
---
PureComponent를 쓰면 PureComponent가 state의 상태를 보고 변경사항을 파악한다.
```javascript
import React, { PureComponent } from "react";

// class Test extends Component {
class Test extends PureComponent {
    state = {
        counter: 0,
    }

    // PureComponent로 shouldComponentUpdate를 대신할 수 있음

    // shouldComponentUpdate(nextProps, nextState, nextContext) {
    //     if (this.state.counter !== nextState.counter) {
    //         // 현재 state와 다음 state를 비교함
    //         return true;
    //     }
    //     return false;
    // }

    onClick = () => {
        this.setState({});
    };

    render() {
        console.log("랜더링", this.state);
        return (
            <div>
                <button onClick={this.onClick}>클릭</button>
            </div>
        )
    }
}

export default Test;
```

<br/>

주의사항

```javascript
import React, { PureComponent } from "react";

class Test extends PureComponent {
    ...
    // 다음과 같은 상황이면 PureComponent가 변화를 알아차리지 못한다.
    onClick = () => {
        const array = this.state.array;
        array.push(5);
        this.setState({
            array: array,
        });
    };

    // 따라서 다음과 같이 입력해야한다.
    onClick = () => {
        this.setState({
            array: [...this.state.array, 1],
        });
    };
    ...
```

## memo (그럼 hooks에는 PureComponent가 없을까?)
---
hooks에서도 Class의 PureComponent 같은 state의 변화를 파악해주는 것이 있다.
```javascript
import React, { memo } from "react";
// memo를 사용하면 state의 변화를 memo가 파악해서 변경되지 않는 부분은 랜더링 하지 않는다.

const Try = memo(({ tryInfo }) => {
    return (
        <li>
            <div>{tryInfo.try}</div>
            <div>{tryInfo.result}</div>
        </li>
    )
}
)
```

## 주의사항
---
- render() 안에는 this.setState()가 들어가면 안된다.  -> this.setState를 하면 render가 실행되고 render()가 실행되면 다시 this.setState가 실행되므로 무한 loop를 하게 됨       

- 자식은 props를 바꾸지 않는다.
꼭 바꿔야하는 경우에는 state를 만들어서 바꾼다.     

```javascript
import React, {memo, useState} from 'react';

const Try = memo(({tryInfo}) => {
    const [result, setResult] = useState(tryInfo.result);

    const onClick = () => {
        setResult("1");
    }

    return (
        <li>
            <div>{tryInfo.try}</div>
            <div onClick={onClick}>{result}</div>
        </li>
    )
})
```