---
layout: post
title: "211004-TIL(session, cookie, token)"
subtitle: "TIL-211004"
categories: til
tags: til-2021-10
comments: false
---

# 🍪 쿠키(cookie)

---

쿠키를 이용해서 서버는 유저의 브라우저에 데이터를 넣을 수 있다.

## 브라우저와 서버가 쿠키를 주고 받는 법

---

웹사이트에 접속하면 브라우저는 서버에 request를 보낸다. 그러면 서버는 response를 보낸다. 이 response에는 모든 데이터와 페이지 정보가 들어있다. 그리고 이 데이터에는 쿠키가 들어 있을 수 있다. 그럼 브라우저는 이 쿠키를 저장한 후 해당 웹사이트에 접속할 때마다 해당 쿠키도 request에 넣어 함께 보내게 된다.

## 쿠키의 특징

---

- 쿠키는 도메인이 따라 제한이 된다. 예를 들면 Youtube가 준 쿠키는 Youtube에만 보내진다.
- 쿠키에는 유효기간이 있다.
- 쿠키는 인증 뿐만 아니라 여러가지 정보를 저장할 수 있다. 예를 들면 웹사이트 언어설정을 한국어에서 영어로 바꾸면 서버는 쿠키를 준다. 그러면 브라우저는 해당 쿠키를 저장하고 다음에 또 해당 웹사이트에 접속 했을 때, 영어로 된 페이지를 보여준다.

# 📚 세션(session)

---

왜 세션과 토큰을 사용하는가? HTTP가 stateless하기 때문이다.

> ## stateless란
>
> ---
>
> 서버로 가는 모든 요청이 이전 request와는 독립적으로 다뤄진다는 뜻이다. 요청끼리 연결이 없고 메모리도 없다. 요청이 끝나면 서버는 해당 유저를 기억하지 못한다. 따라서 요청할 때마다 우리는 서버에게 자신이 누구인지 알려줘야한다.

이 중 한 방법이 세션이다.  
유저가 로그인을 하려면 유저명(예를들어 'JIN')과 비밀번호를 서버로 보낸다. 비번이 맞다면 서버는 세션 DB에 JIN이라는 유저를 생성한다. 그리고 해당 세션에는 unique한 ID가 존재한다. 해당 세션ID는 쿠키를 통해 브라우저로 들어오고 저장된다. 따라서 같은 웹사이트의 다른 페이지로 이동하면 브라우저는 세션ID를 갖고있는 쿠키를 서버에게 보낸다. 그리고 쿠키는 자동으로 서버로 보내진다.  
서버는 들어오는 쿠키를 보고 세션 ID와 함께 오는 쿠키를 확인한다. 하지만 아직까지 서버는 우리가 누구인지 알 수 없다. 단지 세션ID가 있는 쿠키를 지닌 요청이 있다는 것만 알뿐이다. 해당 세션 ID를 가지고 세션 DB를 확인할 것이고, 거기서 해당 ID는 유저명 JIN의 것이라는 것을 알게되고 바로 그제서야 서버는 우리가 누군지 알게되고 환영한다는 메세지를 띄우게 된다.  
기억할건 중요한 유저정보는 모두 서버에 있다는 것이다. 유저가 가지고 있는 것은 세션 ID 뿐이다.

## 세션에서 기억해야할 것

---

현재 로그인한 유저들의 모든 세션ID를 DB에 저장해야한다는 것이다. 즉, request가 들어올 때마다 서버는 쿠키를 받아서 세션ID를 보고 세션 ID와 일치하는 유저를 찾아야하고 그제서야 다음 작업을 수행할 수 있다. 요청이 있을때마다 DB를 찾아야한다는 것!  
따라서 유저가 늘어남에 따라 DB리소스가 더 필요하다.

쿠키는 브라우저에만 있고 IOS나 Android에는 없다. 즉 네이티브 앱은 쿠키를 가지고 있지 않다.

# 📚 토큰(token)

---

토큰은 string 형태로 되어있다.  
모바일 앱일 경우 토큰을 사용하게 된다. 따라서 서버로 토큰을 보내면 서버는 세션DB에서 해당 토큰과 일치하는 유저를 찾는다.

# 📚 JWT

---

JWT는 토큰형식이다. JWT로 유저 인증을 처리하면 세션DB를 가질 필요가 없고 서버는 유저인증한다고 많은 일을 하지 않아도 된다.

유저명 JIN이 로그인을 하려면 유저명, 비밀번호를 서버에 보내야한다. 유저명과 비번이 맞다면 서버는 DB에 뭔가를 생성하지 않는다. 대신 서버는 유저의 ID를 가져다가 사인 알고리즘을 이용해서 사인을 한다. 그리고 해당 '사인된 정보'를 string형태로 보낸다.  
JWT는 보통 세션ID보다 훨씬 긴 형태를 가지고 있다. 왜냐하면 쿠키는 공간 제약이 있기 때문 하지만 JWT는 제약이 없어서 길어도 괜찮다.

동일하게 로그인을 했는데 JWT는 DB를 건드리지 않고 정보를 사인하고 전달하는 것으로 끝난다.  
이제 서버에 요청을 보내려면 세션ID와 비슷하게 해당 '사인된 정보' 혹은 토큰을 서버에 보내야한다. 서버는 토큰을 받으면 해당 사인이 유효한지 체크하고(이는 토큰을 조작했는지 체크하는 것) 토큰이 유효하다면 서버는 우리를 유저로 인증한다.

# ✅ session VS JWT

---

## session

---

세션에서는 그냥 세션ID만 주면 된다. 세션에 대한 모든 정보는 세션 DB에 저장되어있다. 페이지를 요청하면 서버는 세션ID를 DB에서 찾으면 되는 것이다.

## JWT

---

JWT에선 서버는 유저를 인증하는데 필요한 정보를 토큰에 저장한다. 그리고선 해당 토큰을 우리에게 준다. 페이지를 요청하면 서버는 해당 토큰이 유효한지만 검증하면 된다. 즉, DB를 거칠 필요가 없다. 염두할 것은 JWT는 암호화되지 않았다는 것이다. 누구나 열어서 열람할 수 있다. 따라서 비밀정보를 JWT 안에 둬서는 안된다.

## ✅ 장단점

---

세션을 사용하면 서버는 로그인 된 유저의 모든 정보를 저장한다. 해당 정보를 이용하면 새로운 기능들을 추가할 수 있게된다. 예를 들면 특정 유저를 쫓아내고 싶을 때 그냥 세션을 찾아서 삭제하면 된다. 혹은 인스타그램처럼 로그인된 모든 디바이스를 보여줄 때 원하지 않는 디바이스를 강제로 로그아웃 시킬 수 있다. 넷플릭스처럼 계정 공유 숫자를 제한할 수 있다. 현재 몇명이 로그인했고 시청하는지 알 수 있다. 이것이 가능한 이유는 서버가 누가 로그인했는지 저장했고, 세션DB가 있기 때문이다.  
이러한 것이 가능하게 하려면 DB를 사고 유지해야한다. 게다가 유저가 늘어날 수록 DB도 커져야한다. 이를 위한 DB로는 주로 Redis를 사용한다. 해당 목적을 수행하기 위한 빠르고 저렴한 DB이기 때문에.

JWT를 사용하면 생성된 토큰을 추적하지 않는다. 서버가 아는 것은 토큰이 유효한가 여부일 뿐이다. JWT에선 DB를 따로 살 필요는 없다. 하지만 동시에 아까 말한 기능들을 사용할 수 없다. 해당 토큰이 만료되기 전까지는 유효한다.  
그러면 JWT는 별로인가?  
그렇지 않다. 데이터를 사인하고 유저에게 보내고 해당 데이터를 돌려받을 때 유효성을 검증할 수 있다. 이 모든 것이 DB 없이 가능하다. 예를 들면 QR코드

하지만 서비스의 규모가 커지고 유저계정을 좀 더 잘 관리하고 싶다면 그 때는 세션으로 옮기는 것이 좋은 방법이다.

쿠키 => 그냥 옮기는 시스템, 매개체  
토큰 => 서버가 기억하는 이상하게 생긴 텍스트, ID카드처럼 서버에게 보여줘야하는 것  
JWT => 정보를 갖고 있는 토큰, DB 없이 검증할 수 있음

유저 인증을 위해서 JWT 혹은세션을 사용할 수 있음
