---
layout: post
title: "210814-TIL(react.js, mongoDB)"
subtitle: "TIL-210814"
categories: til
tags: til
comments: false
---

## useReducer
---
state의 갯수를 줄이는 것            
```javascript
const initialState = {
    winner: '',
    turn: 'O',
    tableData: [['', '', ''], ['', '', ''], ['', '', '']],
}

const TicTacToe = () => {
    const [state, dispatch] = useReducer(reducer, initialState);
    // 아래의 여러줄에 걸친 state들을 한 줄로 줄이고 2번째 인자 initailState로 넘길 수 있다.


    // const [winner, setWinner] = useState('');
    // const [turn, setTurn] = useState('O');
    // const [tableData, setTableData] = useState([['', '', ''], ['', '', ''], ['', '', '']]);

    return (
            <>
                <Table />
                {state.winner && <div>{state.winner}님의 승리</div>}
            </>
        )
}
```

## reducer
---
```javascript
import React, { useReducer, useCallback } from 'react';
...
const SET_WINNER = 'SET_WINNER'

const reducer = (state, action) => { // 액션을 dispatch할 때 마다 reducer부분이 실행된다.
    switch (action.type) {
        case SET_WINNER:
            // state.winner = action.winner; 이렇게 직접 바꾸면 안됨
            return {
                ...state, // 얕은 복사를 하고
                winner: action.winner, // 바뀌는 부분만 수정
            };
    }
};

const TicTacToe = () => {
    const [state, dispatch] = useReducer(reducer, initialState);

    const onClickTable = useCallback(() => {
        // 액션 개체
        dispatch({ type: SET_WINNER, winner: "O" });
        //dispatch하면 액션을 실행한다. -> reducer
    }, []);

...
};
```


## 태그 때문에 무한로딩이 되는 문제
---
```javascript
const Table = ({ onClick, tableData }) => {
    return (
        <table>
            ...
        </table>
        // <table></table> 부분을 <Table></Table>로 썼더니 화면이 나타나지 않고 무한 로딩이 되었음
    )
}
```

## 첫페이지가 1페이지라고 알려주는 방법
---
처음에 했던 방법        
wordController.js
```javascript
let nowPage = parseInt(req.query.page);
    // 이 때 req.query.page는 undefined가 나온다.
    if (req.query.page === undefined) {
        // 따라서 첫페이지일 때는 nowPage를 1로 정해줬다.
        nowPage = 1;
    }
```
수정된 방법
```javascript
let nowPage = parseInt(req.query.page || 1);
// parseInt에서 or 연산자를 써서 undefined이면 1을 간단하게 설정해줄 수 있다.
```

## 페이지가 10일 때 발생하는 문제
---
10페이지 씩 나타내기 위해 다음과 같은 코드를 작성했다.      
<br/>

wordController.js
```javascript
let start = Math.floor(nowPage / 10) * 10; // 버림
let end = Math.ceil(nowPage / 10) * 10; // 올림
```
query로부터 받아오는 현재 위치를 나타내는 변수 nowPage를 기준으로 내림과 버림을 해서 0과 10을 구했다.       
하지만 문제는 nowPage가 10일때 나타났다. start와 end가 모두 10이 되어서 home.pug에서 반복문을 사용할 수 없게 된 것이다.             

<br/>

home.pug        
```javascript
if nowPage != 1 // 
    a(href=`?page=${nowPage - 1}`) &larr;

- for(var i=start+1; i<=end ; i++)
    a(href=`?page=${i}`)=i

if nowPage != lastPage 
    a(href=`?page=${nowPage + 1}`) &rarr;
```
위의 코드에서 시작이 11이 되고 마지막이 10이 되는 문제가 일어남     
<br/>

따라서      
wordController.js       
```javascript
let startPage = nowPage;
if (!(nowPage % 10)) {
    startPage = nowPage - 1;
}
let start = Math.floor(startPage / 10) * 10;
```
새롭게 startPage라는 변수를 만들고 nowPage의 값을 넣는다. 그리고 만약에 nowPage가 10이라고 판단 되었을 경우 startPage는 -1을 해줘서 start 값이 내림을 통해 0이 되도록 만들어 주었다.        
동일한 방법으로 nowPage가 20일 때도 원래라면 start: 20, end: 20이 되지만 startPage는 19가 되고 내림을 통해 start = 10이 된다. 그리고 pug의 반복문에서 start + 1을 해주므로 11부터 20까지 출력이 된다.