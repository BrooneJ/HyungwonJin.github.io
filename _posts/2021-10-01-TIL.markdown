---
layout: post
title: "211001-TIL"
subtitle: "TIL-211001"
categories: til
tags: til-2021-10
comments: false
---

# 실행 컨텍스트

---

<https://www.zerocho.com/category/JavaScript/post/5741d96d094da4986bc950a0>  
실행 컨텍스트는 코드의 실행환경을 말한다.

브라우저가 스크립트를 로딩해서 실행하는 순간 전역 컨텍스트가 생긴다.  
함수를 호출하면 호출할 때 마다 함수 컨텍스트가 생긴다.

- 컨텍스트 생성 시 컨텍스트 안에 **변수객체, scope chain, this**가 생성된다.
- 컨텍스트 생성 후 함수를 실행하면 변수들은 변수객체 안에서 값을 찾고 없으면 그 밖으로 변수를 찾아나간다.(스코프 체인)

### 전역 컨텍스트

전역 컨텍스트를 생성하면 **변수객체, scope chain, this**가 생성되는데, 이때 this는 따로 설정하지 않으면 window를 가리킨다.  
이 this를 window가 아닌 다른 것을 가리키게 하라면 new를 호출해야한다.

아래의 코드를 실행하면

```js
var name = "zero"; // (1)변수 선언 (6)변수 대입
function wow(word) {
  // (2)변수 선언 (3)변수 대입
  console.log(word + " " + name); // (11)
}
function say() {
  // (4)변수 선언 (5)변수 대입
  var name = "nero"; // (8)
  console.log(name); // (9)
  wow("hello"); // (10)
}
say(); // (7)
```

다음과 같은 전역 컨텍스트가 생성된다.

```js
'전역 컨텍스트': {
  변수객체: {
    arguments: null,
    variable: ['name', 'wow', 'say'],
  },
  scopeChain: ['전역 변수객체'],
  this: window,
}
```

여기서 봐야할 부분은 변수 name 뿐만 아니라 함수명 wow, say도 variable로 취급했다는 점

### 함수 컨텍스트

함수say()를 호출하는 순간 함수 컨텍스트가 생성된다.

```js
'say 컨텍스트': {
  변수객체: {
    arguments: null,
    variable: ['name'], // 초기화 후 [{ name: 'nero' }]가 됨
  },
  scopeChain: ['say 변수객체', '전역 변수객체'],
  this: window,
}
```

하지만 say함수 안에는 wow라는 함수가 있는데 이 variable은 say의 컨텍스트 안에서는 찾을 수가 없다. 이 때 스코프 체인을 통해서 js는 say함수 밖의 전역 컨텍스트의 variable을 찾아보게 된다.  
그리고 전역 컨텍스트 안의 wow를 발견하게 되고 이를 호출한다.  
그러면 함수를 호출했으로 wow 컨텍스트가 생성된다.

```js
'wow 컨텍스트': {
  변수객체: {
    arguments: [{ word : 'hello' }],
    variable: null,
  },
  scopeChain: ['wow 변수객체', '전역 변수객체'],
  this: window,
}
```

그리고 함수 wow는

```js
function wow(word) {
  // (2)변수 선언 (3)변수 대입
  console.log(word + " " + name); // (11)
}
```

이런 형태를 하고 있는데 arguments인 word는 가지고 있지만 변수 name은 가지고 있지 않다.  
따라서 이 때도 스코프 체인을 통해서 전역 컨텍스트의 variable을 찾아보게 된다. 그리고 전역 컨텍스트의 variable에서 name을 찾게 되고 이를 호출한다.

# 호이스팅

---

호이스팅이란 변수를 **선언**하고 **초기화** 했을 때 선언 부분이 최상단으로 끌어올려지는 것을 의미한다.

```js
console.log(zero); // 에러가 아니라 undefined
sayWow(); // 정상적으로 wow
function sayWow() {
  console.log("wow");
}
var zero = "zero";
```

이는 정상적으로 실행된다. 왜냐하면 선언 시에 선언부분이 최상단으로 올라가기 때문

```js
function sayWow() {
  console.log("wow");
}
var zero;
// 이런 식으로 선언과 초기화 부분이 최상단으로 올라감

console.log(zero);
sayWow();
zero = "zero";
```

# this

---

<https://www.zerocho.com/category/JavaScript/post/5b0645cc7e3e36001bf676eb>

this는 기본적으로 window를 가리킴

```js
function a() {
  console.log(this);
}
a(); // Window {}
```

- 객체의 경우

  하지만 객체 속에서는

  ```js
  var obj = {
    a: function () {
      console.log(this);
    },
  };
  obj.a(); // obj
  ```

  자기가 속한 객체를 가리킴

  하지만 다음과 같이 객체를 벗어난 다른 곳에서 호출하면

  ```js
  var a2 = obj.a;
  a2(); // window
  ```

  a2는 obj의 내부가 아닌 window의 내부이므로 window를 가리키게 됨  
   이처럼 this는 호출한 위치가 무엇보다 중요함

- 생성자의 경우
  ```js
  function Person(name, age) {
    this.name = name;
    this.age = age;
  }
  Person.prototype.sayHi = function () {
    console.log(this.name, this.age);
  };
  ```
  이와 같이 생성자가 구성되어 있을 때 new Person으로 호출하지 않고 Person으로 호출한다면
  ```js
  Person("jin", 100);
  console.log(window.name, window.age); // jin 100
  ```
  위와 같이 window의 변수가 바뀌어 버린다.  
   따라서 다음과 같이
  ```js
  var hero = new Person("Hero", 33); // Person {name: "Hero", age: 33}
  hero.sayHi(); // Hero 33
  ```
  new를 붙여서 쓰도록 해야한다.
