---
layout: post
title: "210819-TIL(Redux)"
subtitle: "TIL-210819"
categories: til
tags: til
comments: false
---

# Redux
---
![그림 1-1](/assets/img/web/2021-08-19/1-1.png)         
중앙 저장소의 데이터가 있으면 이를 바꾸기 위해서는 action이라는 것이 필요하다.
- action        
type: function의 이름 같은 느낌     
data: 실제로 바꿀 내용

그리고 이 action을 dispatch하면 내용이 바뀐다.      
하지만 자세히 이야기하면 dispatch만 한다고 내용이 바뀌는 것은 아니다.       
reduce라는 기능이 있는데 action에서 지정한 type의 이름에 해당 하는 기능을 수행하는 과정을 거쳐야한다.       

즉, 중앙 저장소의 데이터를 바꾸기 위해서는      
action설정 -> dispatch -> reduce case작성 -> 데이터 번경      
이라는 과정을 거친다.       

<br/>

장점: 리덕스를 쓰면 action들을 추적해서 에러가 발생한 부분을 쉽게 찾을 수 있다.

## 불변성
---
```javascript
{} === {} // false
const a = {};
const b = a;
a === b // true
```
reducer에서 불변성을 이용하는 이유      
```javascript
return {
    ...state,
    name: action.data
} // 이렇게 하는 이유


const prev = {name: 'one'}
const next = {name: 'two'}
// 이렇게 하면 과거의 정보가 바뀌지 않는다.

const next = prev;
next.name = 'two';

prev.name; // two
// 참조관계이기 때문에 원래 있던 one은 two로 덮어씌워짐
// 즉, 히스토리가 사라져버림

{
    ...state, //를 해줘야 안바뀌는 것들은 참조관계를 유재해줘서 메모리를 아낄 수 있다.
}

// 비교

const nest = { b: 'c' };
const prev = { a: nest };

const next = { ...prev };

prev.a === next.a
// true

prev === next
// false

{ a: 'b' } === { a: 'b' }
// false
```

## reducer 만들기       
---     
reducers/index.js        
```javascript
// initialState에 form을 만들어준다.
const initialState = {
    user: {
        isLoggedIn: false,
        user: null,
        signUpDate: {},
        loginData: {},
    },
    post: {
        mainPosts: [],
    }
}

// action을 만들어준다.
// data는 입력 받을 수 있게 만들어 동적으로 만든다.
export const loginAction = (data) => {
    return {
        type: 'LOG_IN',
        data,
    }
}

export const logoutAction = () => {
    return {
        type: 'LOG_OUT',
    }
}

const rootReducer = (state = initialState, action) => {
    switch (action.type){
        case 'LOG_IN':
            return {
                ...state,
                user: {
                    ...state.user,
                    isLoggedIn: true,
                    user: action.data,
                }
            }
        case 'LOG_OUT':
            return {
                ...state,
                user: {
                    ...state.user,
                    isLoggedIn: false,
                    user: null,
                }
            }
    }
}

export default rootReducer;
```

<br/>

AppLayout.js        
```
npm i react-redux
// react와 redux를 연결시켜줌
```

```javascript
import { useSelector } from 'react-redux';

const AppLayout =({ children}) => {
    const isLoggedIn = useSelector((state) => state.user.isLoggedIn);
    // react-redux를 통해서 받아옴
    // isLoggedIn이 바뀌면 AppLayout component가 리랜더링 됨

    return (
        <Row gutter={8}>
            <Col xs={24} md={6}>
                // {isLoggedIn ? <UserProfile setIsLoggedIn={setIsLoggedIn}/> : <LoginForm setIsLoggedIn={setIsLoggedIn}/>}
                // redux에서 받아오면 되기 때문에 setIsLoggedIn를 통해 props로 넘겨 줄 필요가 없어졌다.
                {isLoggedIn ? <UserProfile /> : <LoginForm />}
            </Col>
            ...
        </Row>
    )
}
```

### useDispatch
---
LoginForm.js
```javascript
import { useDispatch } from 'react-redux';
import { loginAction } from "../reducers";

const LoginForm = () => { //props 지움
    const dispatch = useDispatch();

    const onSubmitForm = useCallback(() => {
        dispatch(loginAction({id, password}));
    }, [])
}
```


### HYDRATE 
---
reducer/index.js
```
import { HYDRATE } from "next-redux-wrapper"
```

## Middleware
---
개발자 도구와 연동가능하게 설치
```
npm i redux-devtools-extension
```

configureStore.js       
```javascript
import { applyMiddleware, createStore, compose } from 'redux';
import { composeWithDevTools } from 'redux-devtools-extension';

const configureStore = () => {
    const middlewares = [];
    const enhancer = process.env.NODE_ENV === 'production'
        ? compose(applyMiddleware(...middlewares)) // 개발 모드일 때는 에러를 찾기 쉽게 로그를 남김
        : composeWithDevTools(applyMiddleware(...middlewares)) // 배포모드일 때는 로그를 남기지 않음
    const store = createStore(reducer, enhancer);
    return store;
}
```

## reducer 쪼개기
---
reducer/post.js & user.js 파일 생성     
<br/>

reducer/user.js     
```javascript
// index.js에 있던 user에 관련된 initialState 요소 가져옴
export const initialState = {
    isLoggedIn: false,
    user: null,
    signUpData: {},
    loginData: {},
}

// user와 관련된 action을 전부 page.js에 작성
export const loginAction = (data) => {
    return {
        type: "LOG_IN",
        data,
    }
}

export const logoutAction = () => {
    return {
        type: "LOG_OUT",
    }
}

const reducer = (state = initialState, action) => {
    switch (action.type) {
    ...
    }
}

export default reducer;
```
reducer/post.js     
```javascript
// post에 관련된 initialState 전부 가져옴
export const initialState = {
    mainPosts: [],
}

const reducer = (state = initialState, action) => {
    switch (action.type) {

        default:
            return state
    }
}

export default reducer;
```

reducer/index.js
```javascript
import { HYDRATE } from "next-redux-wrapper";
// SSR 랜더링을 위한 것
import { combineReducers } from "redux";
// 함수와 함수를 결합하는 것을 도와주는 라이브러리

import user from "./user";
import post from "./post";
// user과 post의 reducer를 import 해 옴


// combineReducers를 쓰면서 바뀌는 부분
// const rootReducer == (state = initialState, action) => {
//     switch (action.type) {
//         case HYDRATE:
//             return { ...state, ...action.payload };
    

const rootReducer = combineReducers({
    // SSR을 위한 index
    index: (state = {}, action) => {
        switch (action.type) {
            case HYDRATE:
                return { ...state, ...action.payload };

            default:
                return state;
        }
    },
    user,
    post,
});

export default rootReducer;
```