---
layout: post
title: "210805-TIL(React.js)"
subtitle: "TIL-210805"
categories: til
tags: til
comments: false
---

## webpack 쓰는 이유
---
여러 개의 자바스트립트 파일을 하나의 파일로 합칠 수 있음.

## react & webpack 설치
---
terminal
```
npm i react react-dom
npm i -D webpack webpack-cli
```

webpack.config.js
```javascript
const path = require("path"); // 현재 경로를 불러옴

module.exports = {
    name: 'wordrelay-setting', // 그냥 이름
    mode: 'development', // 실시간 서비스로 출시할 때는 production으로 바꿔야함
    devtool: 'eval', // 빠른 모드라는 뜻, product는 'hidden-source-map
    resolve: {
        extensions: ['.js', '.jsx'], 
        // entry의 app에 있는 파일 제목을 폴더에서 찾아서 확장자를 붙임
    },

    entry: {
        app: ['./client'],
    },
    output: {
        path: path.join(__dirname, 'dist'), 
        //__dirname은 현재 경로를 불러와서 dist라는 경로를 붙임
        filename: 'app.js',
    }
}
```

client.jsx
```javascript
const React = require("react");
const ReactDom = require("react-dom");
const WordRelay = require("./wordRelay");
// 쪼갠 파일을 불러와서 사용



ReactDom.render(<WordRelay />, document.querySelector("#root"));
```

wordRelay.jsx (client에서 쪼개 파일)
```javascript
const React = require("react"); 
// 파일을 쪼개면 쪼갤 때마다 react를 불러와야함
const { Component } = React; 
// extends React.Compnent를 Component로 줄여쓰기 위해

class WordRelay extends Component {
    state = {

    }

    render() {

    }
}

module.exports = WordRelay;
```

## webpack과 babel을 연결하기
---
터미널에서 설치
```
npm i @babel/core
npm i @babel/preset-env
npm i @babel/preset-react
npm i babel-loader
```
<br/>

webpack.config.js
```javascript
const path = require("path");

module.exports = {
    ...
    entry: {
        app: ['./client'],
    },

    module: { //entry를 거쳐서 module을 적용한 다음 output으로 나감
        rules: [{
            test: /\.jsx?/, // 정규표현식, js파일과 jsx파일에 적용한다는 의미
            loader: 'babel-loader', // 바벨을 적용해서 옛날 브라우저에서도 돌아가도록
            options: { // 바벨 option들 적용
                presets: ['@babel/preset-env', '@babel/preset-react'],
            }
        }]
    },

    output: {
        path: path.join(__dirname, 'dist'),
        filename: 'app.js',
    }
}
```

wordRelay.jsx
```javascript
const React = require("react");
const { Component } = React;

class WordRelay extends Component {
    state = {
        text: "Hello webpack",
    }

    render() {
        return <h1>{this.state.text}</h1>
    }
}

module.exports = WordRelay;
```
index화면 띄우면 적용된 화면이 나타남