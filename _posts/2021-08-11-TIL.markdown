---
layout: post
title: "210811-TIL(리액트를 다루는 기술)"
subtitle: "TIL-210811"
categories: til
tags: til
comments: false
---

리액트는 프레임워크가 아니라 라이브러리이다.

# 용어정리
---
컴포넌트: 재사용이 가능한 API로 수많은 기능들을 내장        

## render()
---
컴포넌트의 생김새를 정의. 이 함수는 html형식의 문자열을 반환하지 않고, 뷰가 어떻게 생겼고 어떻게 작동하는지 정보를 지닌 객체를 반환한다.        
render -> 컴포넌트 랜더링 -> 랜더링이 끝나면 HTML 마크업을 만듦 -> 실제 페이지 안에 DOM 요소를 주입     
컴포넌트는 단순히 업데이트 값을 수정하는 것이 아니라 새로운 데이터를 가지고 render함수를 또 다시 호출한다. 이 때는 이전데 render 함수가 만들었던 컴포넌트 정보와 현재 render함수가 만든 컴포넌트 정보를 비교한다.       

## DOM?
---
![그림 1-1](https://media.vlpt.us/images/solmii/post/b9b74817-bebb-4f8f-8e7e-cd0ae796761d/image.png)        
DOM은 트리형태라서 특정 요소를 찾아서 수정하거나 제거할 수 있다.        
하지만 DOM에 직접 접근하여 변화를 부면 성능이슈가 발생한다. 즉, 느려진다. -> 변화가 일어나면 CSS를 연산하고 레이아웃을 구성하고 리페인트하는 것이 시간이 많이 낭비되는 요소

따라서 최소한으로 DOM을 조작하는 방법이 필요했고 이것이 Virtual DOM이다.

## Virtual DOM?
---
버추얼 돔은 실제 돔을 조작하는 대신 자바스크립트 객체를 구성해서 사용       
1. 데이터를 업데이트하면 전체 UI를 virtual DOM에 리렌더링한다.
2. 이전 Virtual DOM에 있던 내용과 현재 내용을 비교
3. 바뀐 부분만 실제 DOM에 적용한다.

### 리액트가 효과적일 수 있는 상황?
---
지속적으로 데이터가 변화하는 대규모 애플리케이션

## ReactDOM.render
---
컴포넌트를 페이지에 랜더링하는 역할, react-dom 모듈을 불러와 사용할 수 있다. 이 함수의 첫번째 파라미터에는 페이지 렌더링할 내용을 JSX 형태로 작성하고, 두 번째 파라미터에는 해당 JSX를 렌더링할 document 내부 요소를 설정한다.

## &&를 사용한 조건부 랜더링
---
특정 조건을 만족할 때는 보여주고, 만족하지 않을 때는 보여주고 싶지 않다면       
{ 조건 ? 표시 : null }      
대신        
{ 조건 && 표시 }        
와 같은 형태로 나타내는 것이 좋다.