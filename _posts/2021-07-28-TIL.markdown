---
layout: post
title: "210728-TIL"
subtitle: "TIL-210728"
categories: til
tags: til
comments: false
---

# Webpack 적용 방법
---
개발자 모드로 webpack을 설치
```
npm i webpack webpack-cli -D
//webpack-cli를 통해서 콘솔에서 webpack을 불러낼 수 있음
```
<br/>

주의사항
1. entry는 우리가 처리하고자 하는 파일들(소스코드)이다.     
src/client/js/main.js 생성      
package.json.js
```javascript
"scripts": {
    "dev": "nodemon --exec babel-node src/init.js",
    "assets": "webpack --config webpack.config.js"
    //npm run assets로 실행할 수 있도록 설정
  },
```

webpack.config.js 파일 생성
```javascript
module.exports = {
    entry: "./src/client/js/main.js",//이 경로에 있는 파일을 변환시키고자 함
    output: {
        filename: "main.js", // 작업후 저장할 파일명(마음대로 정할 수 있음)
        path: "./assets/js", //작업이 끝난 후 그 파일을 이 디렉토리에 저장
    },
};
```
![그림 1-1](/assets/img/web/2021-07-28/1-1.png)         
위와 같이 절대경로가 아닌 상대경로가 입력 됐다고 경고 메세지가 뜸       
__dirname: directory name은 파일까지의 경로 전체를 말한다.      
path.resolve(): 인수들을 받아서 경로를 만들어줌     
<br/>

ex)path.resolve(__dirname, "assets", "js")  =>  /Users/hyungwonjin/Documents/youtube/assets/js      

<br/>

따라서 다음과 같이 webpack.config.js를 수정     
```javascript
module.exports = {
    entry: "./src/client/js/main.js",//이 경로에 있는 파일을 변환시키고자 함
    output: {
        filename: "main.js", // 작업후 저장할 파일명(마음대로 정할 수 있음)
->      path: path.resolve(__dirname, "assets", "js"), //작업이 끝난 후 그 파일을 이 디렉토리에 저장
    },
};
```

## rules
---
<https://github.com/babel/babel-loader>     
```
npm install -D babel-loader
```
rules는 우리가 각각의 파일 종류에 따라 어떤 전환을 할 건지 결정하는 것      

webpack.config.js
```javascript
const path = require("path");

module.exports = {
    entry: "./src/client/js/main.js", //변경할 파일
    output: {
        filename: "main.js", // 변경된 파일의 이름
        path: path.resolve(__dirname, "assets", "js"), //저장될 경로
    },
    module: {
        rules: [
            {
                test: /\.js$/,//js코드를 가공
                use: {
                    loader: 'babel-loader', //javascript코드를 babel-loader라는 loader로 가공하는 과정
                    options: {
                      presets: [
                        ['@babel/preset-env', { targets: "defaults" }]
                      ]
                    }
                }
            
            }
        ]
    }
};
```

## webpack troubleShooting
---
![그림 1-1](/assets/img/web/2021-07-28/1-2.png)         
우리는 webpack에게 현재 코드가 개발중인지 완성품인지 알려주어야함       
따라서 webpack.config.js에서 개발중이라는 것을 알려줄 필요가 있음       
```javascript
const path = require("path");

module.exports = {
    entry: "./src/client/js/main.js",
->  mode: "development", // 현재 개발 중임을 mode로 표시
    output: {
        filename: "main.js",
        path: path.resolve(__dirname, "assets", "js"),
    },
    ...
};
```
- mode: "development" 적용 전
![그림 1-1](/assets/img/web/2021-07-28/1-3.png)         
한 줄로 압축된 코드를 보여줌
<br/>

- mode: "development" 적용 후
![그림 1-1](/assets/img/web/2021-07-28/1-4.png)         
개발자가 이해하기 쉽게 바뀜

## webpack이 적용된 파일을 브라우저가 볼 수 있게 만들기
---
server.js
```javascript
app.use(localsMiddleware);
app.use("/uploads", express.static("uploads"));
app.use("/static", express.static("assets")); //<- 파일의 위치를 브라우저가 알 수 있게 설정
// "/static"이라는 주소는 브라우저에게 알려주는 주소, 원하는대로 써도 무관
app.use("/", rootRouter);
```
assets/js/main.js를 base.pug랑 연결시키기       
base.pug
```pug
//제일 마지막 부분에
script(src="/static/js/main.js)
```

## sass 적용하기
---
<https://www.npmjs.com/package/sass-loader>     
<https://www.npmjs.com/package/css-loader>      
<https://webpack.js.org/loaders/style-loader/>      
```
npm install sass-loader sass webpack --save-dev
npm install --save-dev css-loader
npm install --save-dev style-loader
```
webpack.config.js
```javascript
const path = require("path");

module.exports = {
    ...
    module: {
        rules: [
           ...
            {
                test: /\.scss$/,
                use: ["style-loader", "css-loader", "sass-loader"],
                //webpack은 역순으로 읽기 때문에 원하는 실행 순서의 역으로 loader를 기입한다.
                //실행순서: sass-loader -> css-loader -> style-loader
                //sass-loader는 scss를 일반적인 css로 바꿈
                //style-loader는 css 코드를 브라우저에 적용하는 역할
            },
        ]
    }
};
```

src/client/js/main.js       
```javascript
import "../scss/styles.csss";
```

## mini-css-extract
---      
<span style="color:yellow">style-loader로 js에 css를 주입 시키는 방식 말고 파일을 따로 두는 방법</span>    
<https://webpack.js.org/plugins/mini-css-extract-plugin/>       
```
npm install --save-dev mini-css-extract-plugin
```
mini-css-extract는 css를 추출해서 별도의 파일로 만들어 줌

webpack.config.js
```javascript
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
//import 해줘야함
const path = require("path");

module.exports = {
    ...
->  plugins: [new MiniCssExtractPlugin()],
    ...
    module: {
        ...
            {
                test: /\.scss$/,
                use: [MiniCssExtractPlugin.loader, "css-loader", "sass-loader"],
                //style-loader 대신에 MiniCssExtractPlugin.loader을 입력
            },
        ]
    }
};
```

## js와 css가 같은 파일에 있는 것을 분리하기
---
![그림 1-1](/assets/img/web/2021-07-28/1-5.png)     
현재 위의 그림과 같이 assets속에 js파일과 css파일이 같이 들어있음       
```javascript
...
module.exports = {
    entry: "./src/client/js/main.js",
    mode: "development",
    plugins: [new MiniCssExtractPlugin({
        filename: "css/styles.css", //css 저장 위치
    })],
    output: {
        filename: "js/main.js", //js 저장 위치
        path: path.resolve(__dirname, "assets"),
    },
    ...
};
```
pug랑 연결      
```pug
link(rel="stylesheet", href="/static/css/styles.css")
```

## webpack에서 nodemon과 비슷한 기능
---
변경 사항이 있을 때 자동으로 적용해 주는 방법       
webpack.config.js
```javascript
...
module.exports = {
    entry: "./src/client/js/main.js",
    mode: "development",
->  watch: true, // watch를 입력해주면 변경이 있을 때 자동으로 적용해줌
    plugins: [new MiniCssExtractPlugin({
        filename: "css/styles.css",
    })],
    ...
```

## 기존에 존재하는 폴더/파일을 지우고 새로운 폴더/파일 넣기
---
webpack.config.js
```javascript
...
module.exports = {
    ...
    output: {
        filename: "js/main.js",
        path: path.resolve(__dirname, "assets"),
->      clean: true, // 이 부분을 입력
    },
    ...
```

## webpack이 적용될 때 back-end가 재시동 되는 문제
---
<https://www.npmjs.com/package/nodemon>     
nodemon.json이라는 파일을 생성      
```javascript
{
    "ignore": [
        "webpack.config.js",
        "src/client/*",
        "assets/*"
    ],
    "exec": "babel-node src/init.js"
}
```
package.json
```javascript
 "scripts": {
    "dev:server": "nodemon",
    "dev:assets": "webpack"
  },
```

## font-awesome 적용하기
---
<https://cdnjs.com/libraries/font-awesome>      
base.pug
```pug
link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css")
```

## CSS reset
---
<https://meyerweb.com/eric/tools/css/reset/>        

## doubble populate
---
userController.js
```javascript
export const see = async (req, res) => {
  const { id } = req.params;
  const user = await User.findById(id).populate("videos"); 
  //이 부분은 video 정보만 불러오기 때문에 user의 정보를 알 수 없다.
  ...
};
```
![그림 1-1](/assets/img/web/2021-07-28/1-6.png)     
위 그림과 같이 user name이 표기 되지 않는다.        
```javascript
export const see = async (req, res) => {
  const { id } = req.params;
  const user = await User.findById(id).populate({ 
      //유저정보를 받고 유저가 올린 비디오 정보를 받음
    path: "videos", //비디오로 부터 
    populate: {
      path: "owner", //유저정보 추출
      model: "User",
    }
  });
  ...
```
![그림 1-1](/assets/img/web/2021-07-28/1-7.png)    
위의 그림과 같이 username이 표기됨 